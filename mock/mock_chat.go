// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/chat/chat_dao.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/huangc28/go-darkpanda-backend/internal/models"
	reflect "reflect"
)

// MockChatDaoer is a mock of ChatDaoer interface
type MockChatDaoer struct {
	ctrl     *gomock.Controller
	recorder *MockChatDaoerMockRecorder
}

// MockChatDaoerMockRecorder is the mock recorder for MockChatDaoer
type MockChatDaoerMockRecorder struct {
	mock *MockChatDaoer
}

// NewMockChatDaoer creates a new mock instance
func NewMockChatDaoer(ctrl *gomock.Controller) *MockChatDaoer {
	mock := &MockChatDaoer{ctrl: ctrl}
	mock.recorder = &MockChatDaoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatDaoer) EXPECT() *MockChatDaoerMockRecorder {
	return m.recorder
}

// GetChatRoomByChannelID mocks base method
func (m *MockChatDaoer) GetChatRoomByChannelID(channelUuid string, fields ...string) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelUuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatRoomByChannelID", varargs...)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoomByChannelID indicates an expected call of GetChatRoomByChannelID
func (mr *MockChatDaoerMockRecorder) GetChatRoomByChannelID(channelUuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelUuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoomByChannelID", reflect.TypeOf((*MockChatDaoer)(nil).GetChatRoomByChannelID), varargs...)
}
