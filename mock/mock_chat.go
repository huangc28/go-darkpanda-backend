// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/contracts/chat.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/huangc28/go-darkpanda-backend/internal/app/contracts"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockChatServicer is a mock of ChatServicer interface
type MockChatServicer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServicerMockRecorder
}

// MockChatServicerMockRecorder is the mock recorder for MockChatServicer
type MockChatServicerMockRecorder struct {
	mock *MockChatServicer
}

// NewMockChatServicer creates a new mock instance
func NewMockChatServicer(ctrl *gomock.Controller) *MockChatServicer {
	mock := &MockChatServicer{ctrl: ctrl}
	mock.recorder = &MockChatServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatServicer) EXPECT() *MockChatServicerMockRecorder {
	return m.recorder
}

// CreateAndJoinChatroom mocks base method
func (m *MockChatServicer) CreateAndJoinChatroom(inquiryID int64, userIDs ...int64) (*models.ChatInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{inquiryID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAndJoinChatroom", varargs...)
	ret0, _ := ret[0].(*models.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndJoinChatroom indicates an expected call of CreateAndJoinChatroom
func (mr *MockChatServicerMockRecorder) CreateAndJoinChatroom(inquiryID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{inquiryID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndJoinChatroom", reflect.TypeOf((*MockChatServicer)(nil).CreateAndJoinChatroom), varargs...)
}

// WithTx mocks base method
func (m *MockChatServicer) WithTx(tx *sqlx.Tx) contracts.ChatServicer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(contracts.ChatServicer)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockChatServicerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockChatServicer)(nil).WithTx), tx)
}

// MockChatDaoer is a mock of ChatDaoer interface
type MockChatDaoer struct {
	ctrl     *gomock.Controller
	recorder *MockChatDaoerMockRecorder
}

// MockChatDaoerMockRecorder is the mock recorder for MockChatDaoer
type MockChatDaoerMockRecorder struct {
	mock *MockChatDaoer
}

// NewMockChatDaoer creates a new mock instance
func NewMockChatDaoer(ctrl *gomock.Controller) *MockChatDaoer {
	mock := &MockChatDaoer{ctrl: ctrl}
	mock.recorder = &MockChatDaoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatDaoer) EXPECT() *MockChatDaoerMockRecorder {
	return m.recorder
}

// CreateChat mocks base method
func (m *MockChatDaoer) CreateChat(inquiryID int64) (*models.ChatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", inquiryID)
	ret0, _ := ret[0].(*models.ChatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat
func (mr *MockChatDaoerMockRecorder) CreateChat(inquiryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatDaoer)(nil).CreateChat), inquiryID)
}

// JoinChat mocks base method
func (m *MockChatDaoer) JoinChat(chatID int64, userIDs ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{chatID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinChat", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat
func (mr *MockChatDaoerMockRecorder) JoinChat(chatID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{chatID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatDaoer)(nil).JoinChat), varargs...)
}

// GetChatRoomByChannelID mocks base method
func (m *MockChatDaoer) GetChatRoomByChannelID(channelUuid string, fields ...string) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelUuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatRoomByChannelID", varargs...)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoomByChannelID indicates an expected call of GetChatRoomByChannelID
func (mr *MockChatDaoerMockRecorder) GetChatRoomByChannelID(channelUuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelUuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoomByChannelID", reflect.TypeOf((*MockChatDaoer)(nil).GetChatRoomByChannelID), varargs...)
}

// WithTx mocks base method
func (m *MockChatDaoer) WithTx(tx *sqlx.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithTx", tx)
}

// WithTx indicates an expected call of WithTx
func (mr *MockChatDaoerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockChatDaoer)(nil).WithTx), tx)
}
