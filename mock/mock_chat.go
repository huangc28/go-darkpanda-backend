// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/contracts/chat.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/huangc28/go-darkpanda-backend/internal/app/contracts"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockChatServicer is a mock of ChatServicer interface
type MockChatServicer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServicerMockRecorder
}

// MockChatServicerMockRecorder is the mock recorder for MockChatServicer
type MockChatServicerMockRecorder struct {
	mock *MockChatServicer
}

// NewMockChatServicer creates a new mock instance
func NewMockChatServicer(ctrl *gomock.Controller) *MockChatServicer {
	mock := &MockChatServicer{ctrl: ctrl}
	mock.recorder = &MockChatServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatServicer) EXPECT() *MockChatServicerMockRecorder {
	return m.recorder
}

// CreateAndJoinChatroom mocks base method
func (m *MockChatServicer) CreateAndJoinChatroom(inquiryID int64, userIDs ...int64) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{inquiryID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAndJoinChatroom", varargs...)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndJoinChatroom indicates an expected call of CreateAndJoinChatroom
func (mr *MockChatServicerMockRecorder) CreateAndJoinChatroom(inquiryID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{inquiryID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndJoinChatroom", reflect.TypeOf((*MockChatServicer)(nil).CreateAndJoinChatroom), varargs...)
}

// WithTx mocks base method
func (m *MockChatServicer) WithTx(tx *sqlx.Tx) contracts.ChatServicer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(contracts.ChatServicer)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockChatServicerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockChatServicer)(nil).WithTx), tx)
}

// MockChatDaoer is a mock of ChatDaoer interface
type MockChatDaoer struct {
	ctrl     *gomock.Controller
	recorder *MockChatDaoerMockRecorder
}

// MockChatDaoerMockRecorder is the mock recorder for MockChatDaoer
type MockChatDaoerMockRecorder struct {
	mock *MockChatDaoer
}

// NewMockChatDaoer creates a new mock instance
func NewMockChatDaoer(ctrl *gomock.Controller) *MockChatDaoer {
	mock := &MockChatDaoer{ctrl: ctrl}
	mock.recorder = &MockChatDaoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatDaoer) EXPECT() *MockChatDaoerMockRecorder {
	return m.recorder
}

// CreateChat mocks base method
func (m *MockChatDaoer) CreateChat(inquiryID int64) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", inquiryID)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat
func (mr *MockChatDaoerMockRecorder) CreateChat(inquiryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatDaoer)(nil).CreateChat), inquiryID)
}

// JoinChat mocks base method
func (m *MockChatDaoer) JoinChat(chatID int64, userIDs ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{chatID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinChat", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinChat indicates an expected call of JoinChat
func (mr *MockChatDaoerMockRecorder) JoinChat(chatID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{chatID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinChat", reflect.TypeOf((*MockChatDaoer)(nil).JoinChat), varargs...)
}

// LeaveChat mocks base method
func (m *MockChatDaoer) LeaveChat(chatID int64, userIDs ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{chatID}
	for _, a := range userIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeaveChat", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveChat indicates an expected call of LeaveChat
func (mr *MockChatDaoerMockRecorder) LeaveChat(chatID interface{}, userIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{chatID}, userIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockChatDaoer)(nil).LeaveChat), varargs...)
}

// LeaveAllMemebers mocks base method
func (m *MockChatDaoer) LeaveAllMemebers(chatroomID int64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveAllMemebers", chatroomID)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveAllMemebers indicates an expected call of LeaveAllMemebers
func (mr *MockChatDaoerMockRecorder) LeaveAllMemebers(chatroomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveAllMemebers", reflect.TypeOf((*MockChatDaoer)(nil).LeaveAllMemebers), chatroomID)
}

// GetChatRoomByChannelID mocks base method
func (m *MockChatDaoer) GetChatRoomByChannelID(chanelUUID string, fields ...string) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{chanelUUID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatRoomByChannelID", varargs...)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoomByChannelID indicates an expected call of GetChatRoomByChannelID
func (mr *MockChatDaoerMockRecorder) GetChatRoomByChannelID(chanelUUID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{chanelUUID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoomByChannelID", reflect.TypeOf((*MockChatDaoer)(nil).GetChatRoomByChannelID), varargs...)
}

// GetChatRoomByInquiryID mocks base method
func (m *MockChatDaoer) GetChatRoomByInquiryID(inquiryID int64, fields ...string) (*models.Chatroom, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{inquiryID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatRoomByInquiryID", varargs...)
	ret0, _ := ret[0].(*models.Chatroom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatRoomByInquiryID indicates an expected call of GetChatRoomByInquiryID
func (mr *MockChatDaoerMockRecorder) GetChatRoomByInquiryID(inquiryID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{inquiryID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatRoomByInquiryID", reflect.TypeOf((*MockChatDaoer)(nil).GetChatRoomByInquiryID), varargs...)
}

// DeleteChatRoom mocks base method
func (m *MockChatDaoer) DeleteChatRoom(ID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatRoom", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChatRoom indicates an expected call of DeleteChatRoom
func (mr *MockChatDaoerMockRecorder) DeleteChatRoom(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatRoom", reflect.TypeOf((*MockChatDaoer)(nil).DeleteChatRoom), ID)
}

// WithTx mocks base method
func (m *MockChatDaoer) WithTx(tx *sqlx.Tx) contracts.ChatDaoer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(contracts.ChatDaoer)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockChatDaoerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockChatDaoer)(nil).WithTx), tx)
}

// GetFemaleInquiryChatRooms mocks base method
func (m *MockChatDaoer) GetFemaleInquiryChatRooms(userID int64) ([]models.InquiryChatRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFemaleInquiryChatRooms", userID)
	ret0, _ := ret[0].([]models.InquiryChatRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFemaleInquiryChatRooms indicates an expected call of GetFemaleInquiryChatRooms
func (mr *MockChatDaoerMockRecorder) GetFemaleInquiryChatRooms(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFemaleInquiryChatRooms", reflect.TypeOf((*MockChatDaoer)(nil).GetFemaleInquiryChatRooms), userID)
}
