// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/contracts/users.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/huangc28/go-darkpanda-backend/internal/app/contracts"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockUserDAOer is a mock of UserDAOer interface
type MockUserDAOer struct {
	ctrl     *gomock.Controller
	recorder *MockUserDAOerMockRecorder
}

// MockUserDAOerMockRecorder is the mock recorder for MockUserDAOer
type MockUserDAOerMockRecorder struct {
	mock *MockUserDAOer
}

// NewMockUserDAOer creates a new mock instance
func NewMockUserDAOer(ctrl *gomock.Controller) *MockUserDAOer {
	mock := &MockUserDAOer{ctrl: ctrl}
	mock.recorder = &MockUserDAOerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDAOer) EXPECT() *MockUserDAOerMockRecorder {
	return m.recorder
}

// GetUserInfoWithInquiryByUuid mocks base method
func (m *MockUserDAOer) GetUserInfoWithInquiryByUuid(ctx context.Context, uuid string, inquiryStatus models.InquiryStatus) (*models.UserWithInquiries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoWithInquiryByUuid", ctx, uuid, inquiryStatus)
	ret0, _ := ret[0].(*models.UserWithInquiries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoWithInquiryByUuid indicates an expected call of GetUserInfoWithInquiryByUuid
func (mr *MockUserDAOerMockRecorder) GetUserInfoWithInquiryByUuid(ctx, uuid, inquiryStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoWithInquiryByUuid", reflect.TypeOf((*MockUserDAOer)(nil).GetUserInfoWithInquiryByUuid), ctx, uuid, inquiryStatus)
}

// UpdateUserInfoByUuid mocks base method
func (m *MockUserDAOer) UpdateUserInfoByUuid(ctx context.Context, p contracts.UpdateUserInfoParams) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfoByUuid", ctx, p)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfoByUuid indicates an expected call of UpdateUserInfoByUuid
func (mr *MockUserDAOerMockRecorder) UpdateUserInfoByUuid(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfoByUuid", reflect.TypeOf((*MockUserDAOer)(nil).UpdateUserInfoByUuid), ctx, p)
}

// GetUserByUuid mocks base method
func (m *MockUserDAOer) GetUserByUuid(uuid string, fields ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{uuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByUuid", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUuid indicates an expected call of GetUserByUuid
func (mr *MockUserDAOerMockRecorder) GetUserByUuid(uuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUuid", reflect.TypeOf((*MockUserDAOer)(nil).GetUserByUuid), varargs...)
}

// GetUserByID mocks base method
func (m *MockUserDAOer) GetUserByID(ID int64, fields ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ID}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByID", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockUserDAOerMockRecorder) GetUserByID(ID interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ID}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserDAOer)(nil).GetUserByID), varargs...)
}

// CheckIsMaleByUuid mocks base method
func (m *MockUserDAOer) CheckIsMaleByUuid(uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsMaleByUuid", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsMaleByUuid indicates an expected call of CheckIsMaleByUuid
func (mr *MockUserDAOerMockRecorder) CheckIsMaleByUuid(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsMaleByUuid", reflect.TypeOf((*MockUserDAOer)(nil).CheckIsMaleByUuid), uuid)
}

// CheckIsFemaleByUuid mocks base method
func (m *MockUserDAOer) CheckIsFemaleByUuid(uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsFemaleByUuid", uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIsFemaleByUuid indicates an expected call of CheckIsFemaleByUuid
func (mr *MockUserDAOerMockRecorder) CheckIsFemaleByUuid(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsFemaleByUuid", reflect.TypeOf((*MockUserDAOer)(nil).CheckIsFemaleByUuid), uuid)
}

// GetUserImagesByUuid mocks base method
func (m *MockUserDAOer) GetUserImagesByUuid(uuid string, offset, perPage int) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserImagesByUuid", uuid, offset, perPage)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserImagesByUuid indicates an expected call of GetUserImagesByUuid
func (mr *MockUserDAOerMockRecorder) GetUserImagesByUuid(uuid, offset, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserImagesByUuid", reflect.TypeOf((*MockUserDAOer)(nil).GetUserImagesByUuid), uuid, offset, perPage)
}

// WithTx mocks base method
func (m *MockUserDAOer) WithTx(tx *sqlx.Tx) contracts.UserDAOer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(contracts.UserDAOer)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockUserDAOerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserDAOer)(nil).WithTx), tx)
}
