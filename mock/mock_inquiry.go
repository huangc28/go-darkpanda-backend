// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/contracts/inquiry.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	contracts "github.com/huangc28/go-darkpanda-backend/internal/app/contracts"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	reflect "reflect"
)

// MockInquiryDAOer is a mock of InquiryDAOer interface
type MockInquiryDAOer struct {
	ctrl     *gomock.Controller
	recorder *MockInquiryDAOerMockRecorder
}

// MockInquiryDAOerMockRecorder is the mock recorder for MockInquiryDAOer
type MockInquiryDAOerMockRecorder struct {
	mock *MockInquiryDAOer
}

// NewMockInquiryDAOer creates a new mock instance
func NewMockInquiryDAOer(ctrl *gomock.Controller) *MockInquiryDAOer {
	mock := &MockInquiryDAOer{ctrl: ctrl}
	mock.recorder = &MockInquiryDAOerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInquiryDAOer) EXPECT() *MockInquiryDAOerMockRecorder {
	return m.recorder
}

// GetInquiryByUuid mocks base method
func (m *MockInquiryDAOer) GetInquiryByUuid(iqUuid string, fields ...string) (*models.ServiceInquiry, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{iqUuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInquiryByUuid", varargs...)
	ret0, _ := ret[0].(*models.ServiceInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInquiryByUuid indicates an expected call of GetInquiryByUuid
func (mr *MockInquiryDAOerMockRecorder) GetInquiryByUuid(iqUuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{iqUuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInquiryByUuid", reflect.TypeOf((*MockInquiryDAOer)(nil).GetInquiryByUuid), varargs...)
}

// PatchInquiryStatusByUUID mocks base method
func (m *MockInquiryDAOer) PatchInquiryStatusByUUID(params contracts.PatchInquiryStatusByUUIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInquiryStatusByUUID", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInquiryStatusByUUID indicates an expected call of PatchInquiryStatusByUUID
func (mr *MockInquiryDAOerMockRecorder) PatchInquiryStatusByUUID(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInquiryStatusByUUID", reflect.TypeOf((*MockInquiryDAOer)(nil).PatchInquiryStatusByUUID), params)
}
