// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/inquiry.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/huangc28/go-darkpanda-backend/db"
	contracts "github.com/huangc28/go-darkpanda-backend/internal/app/contracts"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	reflect "reflect"
)

// MockInquiryDAOer is a mock of InquiryDAOer interface
type MockInquiryDAOer struct {
	ctrl     *gomock.Controller
	recorder *MockInquiryDAOerMockRecorder
}

// MockInquiryDAOerMockRecorder is the mock recorder for MockInquiryDAOer
type MockInquiryDAOerMockRecorder struct {
	mock *MockInquiryDAOer
}

// NewMockInquiryDAOer creates a new mock instance
func NewMockInquiryDAOer(ctrl *gomock.Controller) *MockInquiryDAOer {
	mock := &MockInquiryDAOer{ctrl: ctrl}
	mock.recorder = &MockInquiryDAOerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInquiryDAOer) EXPECT() *MockInquiryDAOerMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockInquiryDAOer) WithTx(tx db.Conn) contracts.InquiryDAOer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(contracts.InquiryDAOer)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockInquiryDAOerMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockInquiryDAOer)(nil).WithTx), tx)
}

// CheckHasActiveInquiryByID mocks base method
func (m *MockInquiryDAOer) CheckHasActiveInquiryByID(id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHasActiveInquiryByID", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHasActiveInquiryByID indicates an expected call of CheckHasActiveInquiryByID
func (mr *MockInquiryDAOerMockRecorder) CheckHasActiveInquiryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHasActiveInquiryByID", reflect.TypeOf((*MockInquiryDAOer)(nil).CheckHasActiveInquiryByID), id)
}

// GetInquiries mocks base method
func (m *MockInquiryDAOer) GetInquiries(userId, offset, perpage int, statuses ...models.InquiryStatus) ([]*contracts.InquiryInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{userId, offset, perpage}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInquiries", varargs...)
	ret0, _ := ret[0].([]*contracts.InquiryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInquiries indicates an expected call of GetInquiries
func (mr *MockInquiryDAOerMockRecorder) GetInquiries(userId, offset, perpage interface{}, statuses ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userId, offset, perpage}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInquiries", reflect.TypeOf((*MockInquiryDAOer)(nil).GetInquiries), varargs...)
}

// GetInquiryByUuid mocks base method
func (m *MockInquiryDAOer) GetInquiryByUuid(iqUuid string, fields ...string) (*contracts.InquiryResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{iqUuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInquiryByUuid", varargs...)
	ret0, _ := ret[0].(*contracts.InquiryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInquiryByUuid indicates an expected call of GetInquiryByUuid
func (mr *MockInquiryDAOerMockRecorder) GetInquiryByUuid(iqUuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{iqUuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInquiryByUuid", reflect.TypeOf((*MockInquiryDAOer)(nil).GetInquiryByUuid), varargs...)
}

// HasMoreInquiries mocks base method
func (m *MockInquiryDAOer) HasMoreInquiries(offset, perPage int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasMoreInquiries", offset, perPage)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasMoreInquiries indicates an expected call of HasMoreInquiries
func (mr *MockInquiryDAOerMockRecorder) HasMoreInquiries(offset, perPage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasMoreInquiries", reflect.TypeOf((*MockInquiryDAOer)(nil).HasMoreInquiries), offset, perPage)
}

// AskingInquiry mocks base method
func (m *MockInquiryDAOer) AskingInquiry(pickerID, inquiryID int64) (*models.ServiceInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskingInquiry", pickerID, inquiryID)
	ret0, _ := ret[0].(*models.ServiceInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskingInquiry indicates an expected call of AskingInquiry
func (mr *MockInquiryDAOerMockRecorder) AskingInquiry(pickerID, inquiryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskingInquiry", reflect.TypeOf((*MockInquiryDAOer)(nil).AskingInquiry), pickerID, inquiryID)
}

// PatchInquiryStatusByUUID mocks base method
func (m *MockInquiryDAOer) PatchInquiryStatusByUUID(params contracts.PatchInquiryStatusByUUIDParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInquiryStatusByUUID", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchInquiryStatusByUUID indicates an expected call of PatchInquiryStatusByUUID
func (mr *MockInquiryDAOerMockRecorder) PatchInquiryStatusByUUID(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInquiryStatusByUUID", reflect.TypeOf((*MockInquiryDAOer)(nil).PatchInquiryStatusByUUID), params)
}

// GetInquirerByInquiryUUID mocks base method
func (m *MockInquiryDAOer) GetInquirerByInquiryUUID(uuid string, fields ...string) (*models.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{uuid}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInquirerByInquiryUUID", varargs...)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInquirerByInquiryUUID indicates an expected call of GetInquirerByInquiryUUID
func (mr *MockInquiryDAOerMockRecorder) GetInquirerByInquiryUUID(uuid interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{uuid}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInquirerByInquiryUUID", reflect.TypeOf((*MockInquiryDAOer)(nil).GetInquirerByInquiryUUID), varargs...)
}

// PatchInquiryByInquiryUUID mocks base method
func (m *MockInquiryDAOer) PatchInquiryByInquiryUUID(params contracts.PatchInquiryParams) (*models.ServiceInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchInquiryByInquiryUUID", params)
	ret0, _ := ret[0].(*models.ServiceInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchInquiryByInquiryUUID indicates an expected call of PatchInquiryByInquiryUUID
func (mr *MockInquiryDAOerMockRecorder) PatchInquiryByInquiryUUID(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchInquiryByInquiryUUID", reflect.TypeOf((*MockInquiryDAOer)(nil).PatchInquiryByInquiryUUID), params)
}

// GetActiveInquiry mocks base method
func (m *MockInquiryDAOer) GetActiveInquiry(inquirerId int) (*models.ActiveInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveInquiry", inquirerId)
	ret0, _ := ret[0].(*models.ActiveInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveInquiry indicates an expected call of GetActiveInquiry
func (mr *MockInquiryDAOerMockRecorder) GetActiveInquiry(inquirerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveInquiry", reflect.TypeOf((*MockInquiryDAOer)(nil).GetActiveInquiry), inquirerId)
}

// GetInquiryByChannelUuid mocks base method
func (m *MockInquiryDAOer) GetInquiryByChannelUuid(channelUuid string) (*models.ServiceInquiry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInquiryByChannelUuid", channelUuid)
	ret0, _ := ret[0].(*models.ServiceInquiry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInquiryByChannelUuid indicates an expected call of GetInquiryByChannelUuid
func (mr *MockInquiryDAOerMockRecorder) GetInquiryByChannelUuid(channelUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInquiryByChannelUuid", reflect.TypeOf((*MockInquiryDAOer)(nil).GetInquiryByChannelUuid), channelUuid)
}
