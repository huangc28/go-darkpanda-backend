// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/huangchihan/Documents/go-darkpanda-backend/internal/app/contracts/referral.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/huangc28/go-darkpanda-backend/internal/app/models"
	reflect "reflect"
)

// MockReferralDaoer is a mock of ReferralDaoer interface
type MockReferralDaoer struct {
	ctrl     *gomock.Controller
	recorder *MockReferralDaoerMockRecorder
}

// MockReferralDaoerMockRecorder is the mock recorder for MockReferralDaoer
type MockReferralDaoerMockRecorder struct {
	mock *MockReferralDaoer
}

// NewMockReferralDaoer creates a new mock instance
func NewMockReferralDaoer(ctrl *gomock.Controller) *MockReferralDaoer {
	mock := &MockReferralDaoer{ctrl: ctrl}
	mock.recorder = &MockReferralDaoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReferralDaoer) EXPECT() *MockReferralDaoerMockRecorder {
	return m.recorder
}

// GetByRefCode mocks base method
func (m *MockReferralDaoer) GetByRefCode(refCode string, fields []string) (*models.UserRefcode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefCode", refCode, fields)
	ret0, _ := ret[0].(*models.UserRefcode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefCode indicates an expected call of GetByRefCode
func (mr *MockReferralDaoerMockRecorder) GetByRefCode(refCode, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefCode", reflect.TypeOf((*MockReferralDaoer)(nil).GetByRefCode), refCode, fields)
}
