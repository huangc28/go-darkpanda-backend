// Code generated by sqlc. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkUserOwnsInquiryStmt, err = db.PrepareContext(ctx, checkUserOwnsInquiry); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUserOwnsInquiry: %w", err)
	}
	if q.createChatroomStmt, err = db.PrepareContext(ctx, createChatroom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChatroom: %w", err)
	}
	if q.createInquiryStmt, err = db.PrepareContext(ctx, createInquiry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateInquiry: %w", err)
	}
	if q.createPaymentStmt, err = db.PrepareContext(ctx, createPayment); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePayment: %w", err)
	}
	if q.createRefcodeStmt, err = db.PrepareContext(ctx, createRefcode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRefcode: %w", err)
	}
	if q.createServiceStmt, err = db.PrepareContext(ctx, createService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateService: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getInquiryByInquirerIDStmt, err = db.PrepareContext(ctx, getInquiryByInquirerID); err != nil {
		return nil, fmt.Errorf("error preparing query GetInquiryByInquirerID: %w", err)
	}
	if q.getInquiryByUuidStmt, err = db.PrepareContext(ctx, getInquiryByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetInquiryByUuid: %w", err)
	}
	if q.getReferCodeInfoByRefcodeStmt, err = db.PrepareContext(ctx, getReferCodeInfoByRefcode); err != nil {
		return nil, fmt.Errorf("error preparing query GetReferCodeInfoByRefcode: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUserByUuidStmt, err = db.PrepareContext(ctx, getUserByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUuid: %w", err)
	}
	if q.getUserIDByUuidStmt, err = db.PrepareContext(ctx, getUserIDByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserIDByUuid: %w", err)
	}
	if q.patchInquiryStatusStmt, err = db.PrepareContext(ctx, patchInquiryStatus); err != nil {
		return nil, fmt.Errorf("error preparing query PatchInquiryStatus: %w", err)
	}
	if q.patchInquiryStatusByUuidStmt, err = db.PrepareContext(ctx, patchInquiryStatusByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query PatchInquiryStatusByUuid: %w", err)
	}
	if q.patchUserInfoByUuidStmt, err = db.PrepareContext(ctx, patchUserInfoByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query PatchUserInfoByUuid: %w", err)
	}
	if q.updateInquiryByUuidStmt, err = db.PrepareContext(ctx, updateInquiryByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInquiryByUuid: %w", err)
	}
	if q.updateInviteeIDByRefCodeStmt, err = db.PrepareContext(ctx, updateInviteeIDByRefCode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateInviteeIDByRefCode: %w", err)
	}
	if q.updateVerifyStatusByIdStmt, err = db.PrepareContext(ctx, updateVerifyStatusById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateVerifyStatusById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkUserOwnsInquiryStmt != nil {
		if cerr := q.checkUserOwnsInquiryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUserOwnsInquiryStmt: %w", cerr)
		}
	}
	if q.createChatroomStmt != nil {
		if cerr := q.createChatroomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChatroomStmt: %w", cerr)
		}
	}
	if q.createInquiryStmt != nil {
		if cerr := q.createInquiryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createInquiryStmt: %w", cerr)
		}
	}
	if q.createPaymentStmt != nil {
		if cerr := q.createPaymentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPaymentStmt: %w", cerr)
		}
	}
	if q.createRefcodeStmt != nil {
		if cerr := q.createRefcodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRefcodeStmt: %w", cerr)
		}
	}
	if q.createServiceStmt != nil {
		if cerr := q.createServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServiceStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getInquiryByInquirerIDStmt != nil {
		if cerr := q.getInquiryByInquirerIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInquiryByInquirerIDStmt: %w", cerr)
		}
	}
	if q.getInquiryByUuidStmt != nil {
		if cerr := q.getInquiryByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getInquiryByUuidStmt: %w", cerr)
		}
	}
	if q.getReferCodeInfoByRefcodeStmt != nil {
		if cerr := q.getReferCodeInfoByRefcodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReferCodeInfoByRefcodeStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUserByUuidStmt != nil {
		if cerr := q.getUserByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUuidStmt: %w", cerr)
		}
	}
	if q.getUserIDByUuidStmt != nil {
		if cerr := q.getUserIDByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserIDByUuidStmt: %w", cerr)
		}
	}
	if q.patchInquiryStatusStmt != nil {
		if cerr := q.patchInquiryStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing patchInquiryStatusStmt: %w", cerr)
		}
	}
	if q.patchInquiryStatusByUuidStmt != nil {
		if cerr := q.patchInquiryStatusByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing patchInquiryStatusByUuidStmt: %w", cerr)
		}
	}
	if q.patchUserInfoByUuidStmt != nil {
		if cerr := q.patchUserInfoByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing patchUserInfoByUuidStmt: %w", cerr)
		}
	}
	if q.updateInquiryByUuidStmt != nil {
		if cerr := q.updateInquiryByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInquiryByUuidStmt: %w", cerr)
		}
	}
	if q.updateInviteeIDByRefCodeStmt != nil {
		if cerr := q.updateInviteeIDByRefCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateInviteeIDByRefCodeStmt: %w", cerr)
		}
	}
	if q.updateVerifyStatusByIdStmt != nil {
		if cerr := q.updateVerifyStatusByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateVerifyStatusByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	checkUserOwnsInquiryStmt      *sql.Stmt
	createChatroomStmt            *sql.Stmt
	createInquiryStmt             *sql.Stmt
	createPaymentStmt             *sql.Stmt
	createRefcodeStmt             *sql.Stmt
	createServiceStmt             *sql.Stmt
	createUserStmt                *sql.Stmt
	getInquiryByInquirerIDStmt    *sql.Stmt
	getInquiryByUuidStmt          *sql.Stmt
	getReferCodeInfoByRefcodeStmt *sql.Stmt
	getUserByIDStmt               *sql.Stmt
	getUserByUsernameStmt         *sql.Stmt
	getUserByUuidStmt             *sql.Stmt
	getUserIDByUuidStmt           *sql.Stmt
	patchInquiryStatusStmt        *sql.Stmt
	patchInquiryStatusByUuidStmt  *sql.Stmt
	patchUserInfoByUuidStmt       *sql.Stmt
	updateInquiryByUuidStmt       *sql.Stmt
	updateInviteeIDByRefCodeStmt  *sql.Stmt
	updateVerifyStatusByIdStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		checkUserOwnsInquiryStmt:      q.checkUserOwnsInquiryStmt,
		createChatroomStmt:            q.createChatroomStmt,
		createInquiryStmt:             q.createInquiryStmt,
		createPaymentStmt:             q.createPaymentStmt,
		createRefcodeStmt:             q.createRefcodeStmt,
		createServiceStmt:             q.createServiceStmt,
		createUserStmt:                q.createUserStmt,
		getInquiryByInquirerIDStmt:    q.getInquiryByInquirerIDStmt,
		getInquiryByUuidStmt:          q.getInquiryByUuidStmt,
		getReferCodeInfoByRefcodeStmt: q.getReferCodeInfoByRefcodeStmt,
		getUserByIDStmt:               q.getUserByIDStmt,
		getUserByUsernameStmt:         q.getUserByUsernameStmt,
		getUserByUuidStmt:             q.getUserByUuidStmt,
		getUserIDByUuidStmt:           q.getUserIDByUuidStmt,
		patchInquiryStatusStmt:        q.patchInquiryStatusStmt,
		patchInquiryStatusByUuidStmt:  q.patchInquiryStatusByUuidStmt,
		patchUserInfoByUuidStmt:       q.patchUserInfoByUuidStmt,
		updateInquiryByUuidStmt:       q.updateInquiryByUuidStmt,
		updateInviteeIDByRefCodeStmt:  q.updateInviteeIDByRefCodeStmt,
		updateVerifyStatusByIdStmt:    q.updateVerifyStatusByIdStmt,
	}
}
