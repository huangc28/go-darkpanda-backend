// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type InquiryStatus string

const (
	InquiryStatusInquiring InquiryStatus = "inquiring"
	InquiryStatusCanceled  InquiryStatus = "canceled"
	InquiryStatusExpired   InquiryStatus = "expired"
	InquiryStatusBooked    InquiryStatus = "booked"
)

func (e *InquiryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InquiryStatus(s)
	case string:
		*e = InquiryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InquiryStatus: %T", src)
	}
	return nil
}

type PremiumKind string

const (
	PremiumKindNormal PremiumKind = "normal"
	PremiumKindPaid   PremiumKind = "paid"
)

func (e *PremiumKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PremiumKind(s)
	case string:
		*e = PremiumKind(s)
	default:
		return fmt.Errorf("unsupported scan type for PremiumKind: %T", src)
	}
	return nil
}

type RefCodeType string

const (
	RefCodeTypeInvitor RefCodeType = "invitor"
	RefCodeTypeManager RefCodeType = "manager"
)

func (e *RefCodeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RefCodeType(s)
	case string:
		*e = RefCodeType(s)
	default:
		return fmt.Errorf("unsupported scan type for RefCodeType: %T", src)
	}
	return nil
}

type ServiceType string

const (
	ServiceTypeSex      ServiceType = "sex"
	ServiceTypeDiner    ServiceType = "diner"
	ServiceTypeMovie    ServiceType = "movie"
	ServiceTypeShopping ServiceType = "shopping"
	ServiceTypeChat     ServiceType = "chat"
)

func (e *ServiceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ServiceType(s)
	case string:
		*e = ServiceType(s)
	default:
		return fmt.Errorf("unsupported scan type for ServiceType: %T", src)
	}
	return nil
}

type Payment struct {
	ID         int64          `json:"id"`
	PayerID    int32          `json:"payer_id"`
	PayeeID    int32          `json:"payee_id"`
	ServiceID  int32          `json:"service_id"`
	Price      float64        `json:"price"`
	RecTradeID sql.NullString `json:"rec_trade_id"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	DeletedAt  sql.NullTime   `json:"deleted_at"`
}

type Service struct {
	ID                int64         `json:"id"`
	Uuid              uuid.UUID     `json:"uuid"`
	CustomerID        sql.NullInt32 `json:"customer_id"`
	ServiceProviderID sql.NullInt32 `json:"service_provider_id"`
	Price             float64       `json:"price"`
	Duration          int32         `json:"duration"`
	AppointmentTime   time.Time     `json:"appointment_time"`
	Lng               time.Time     `json:"lng"`
	Lat               time.Time     `json:"lat"`
	ServiceType       ServiceType   `json:"service_type"`
	GirlReady         sql.NullBool  `json:"girl_ready"`
	ManReady          sql.NullBool  `json:"man_ready"`
	CreatedAt         time.Time     `json:"created_at"`
	UpdatedAt         sql.NullTime  `json:"updated_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
}

type ServiceInquiry struct {
	ID            int64         `json:"id"`
	InquirerID    sql.NullInt32 `json:"inquirer_id"`
	Budget        float64       `json:"budget"`
	ServiceType   ServiceType   `json:"service_type"`
	InquiryStatus InquiryStatus `json:"inquiry_status"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     sql.NullTime  `json:"updated_at"`
	DeletedAt     sql.NullTime  `json:"deleted_at"`
}

type User struct {
	ID                int64         `json:"id"`
	Username          string        `json:"username"`
	PhoneVerified     sql.NullBool  `json:"phone_verified"`
	AuthSmsCode       sql.NullInt32 `json:"auth_sms_code"`
	Gender            Gender        `json:"gender"`
	PremiumKind       PremiumKind   `json:"premium_kind"`
	PremiumExpiryDate sql.NullTime  `json:"premium_expiry_date"`
	CreatedAt         time.Time     `json:"created_at"`
	UpdatedAt         sql.NullTime  `json:"updated_at"`
	DeletedAt         sql.NullTime  `json:"deleted_at"`
}

type UserRating struct {
	ID         int64          `json:"id"`
	FromUserID sql.NullInt32  `json:"from_user_id"`
	ToUserID   sql.NullInt32  `json:"to_user_id"`
	Rating     sql.NullInt32  `json:"rating"`
	Comments   sql.NullString `json:"comments"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	DeletedAt  sql.NullTime   `json:"deleted_at"`
}

type UserRefcode struct {
	ID          int64         `json:"id"`
	InvitorID   int32         `json:"invitor_id"`
	InviteeID   sql.NullInt32 `json:"invitee_id"`
	RefCode     string        `json:"ref_code"`
	RefCodeType RefCodeType   `json:"ref_code_type"`
	CreatedAt   time.Time     `json:"created_at"`
	UpdatedAt   sql.NullTime  `json:"updated_at"`
	DeletedAt   sql.NullTime  `json:"deleted_at"`
}
