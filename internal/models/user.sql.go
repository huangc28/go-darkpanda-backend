// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package models

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	username,
	uuid,
	phone_verify_code,
	phone_verified,
	auth_sms_code,
	gender,
	premium_type,
	premium_expiry_date
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size
`

type CreateUserParams struct {
	Username          string         `json:"username"`
	Uuid              string         `json:"uuid"`
	PhoneVerifyCode   sql.NullString `json:"phone_verify_code"`
	PhoneVerified     sql.NullBool   `json:"phone_verified"`
	AuthSmsCode       sql.NullInt32  `json:"auth_sms_code"`
	Gender            Gender         `json:"gender"`
	PremiumType       PremiumType    `json:"premium_type"`
	PremiumExpiryDate sql.NullTime   `json:"premium_expiry_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Uuid,
		arg.PhoneVerifyCode,
		arg.PhoneVerified,
		arg.AuthSmsCode,
		arg.Gender,
		arg.PremiumType,
		arg.PremiumExpiryDate,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserByUuid(ctx context.Context, uuid string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUuidStmt, getUserByUuid, uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const getUserByVerifyCode = `-- name: GetUserByVerifyCode :one
SELECT id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size FROM users
WHERE phone_verify_code = $1 LIMIT 1
`

func (q *Queries) GetUserByVerifyCode(ctx context.Context, phoneVerifyCode sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.getUserByVerifyCodeStmt, getUserByVerifyCode, phoneVerifyCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const getUserIDByUuid = `-- name: GetUserIDByUuid :one
SELECT id FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserIDByUuid(ctx context.Context, uuid string) (int64, error) {
	row := q.queryRow(ctx, q.getUserIDByUuidStmt, getUserIDByUuid, uuid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const patchUserInfoByUuid = `-- name: PatchUserInfoByUuid :one
UPDATE users
SET avatar_url = $1, nationality = $2, region = $3, age = $4, height = $5, weight = $6, description = $7, breast_size = $8
WHERE uuid = $9
RETURNING id, username, phone_verified, auth_sms_code, gender, premium_type, premium_expiry_date, created_at, updated_at, deleted_at, uuid, phone_verify_code, avatar_url, nationality, region, age, height, weight, habbits, description, breast_size
`

type PatchUserInfoByUuidParams struct {
	AvatarUrl   sql.NullString `json:"avatar_url"`
	Nationality sql.NullString `json:"nationality"`
	Region      sql.NullString `json:"region"`
	Age         sql.NullInt32  `json:"age"`
	Height      sql.NullString `json:"height"`
	Weight      sql.NullString `json:"weight"`
	Description sql.NullString `json:"description"`
	BreastSize  sql.NullString `json:"breast_size"`
	Uuid        string         `json:"uuid"`
}

func (q *Queries) PatchUserInfoByUuid(ctx context.Context, arg PatchUserInfoByUuidParams) (User, error) {
	row := q.queryRow(ctx, q.patchUserInfoByUuidStmt, patchUserInfoByUuid,
		arg.AvatarUrl,
		arg.Nationality,
		arg.Region,
		arg.Age,
		arg.Height,
		arg.Weight,
		arg.Description,
		arg.BreastSize,
		arg.Uuid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PhoneVerified,
		&i.AuthSmsCode,
		&i.Gender,
		&i.PremiumType,
		&i.PremiumExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.PhoneVerifyCode,
		&i.AvatarUrl,
		&i.Nationality,
		&i.Region,
		&i.Age,
		&i.Height,
		&i.Weight,
		&i.Habbits,
		&i.Description,
		&i.BreastSize,
	)
	return i, err
}

const updateVerifyCodeById = `-- name: UpdateVerifyCodeById :exec
UPDATE users SET phone_verify_code = $1
WHERE id = $2
`

type UpdateVerifyCodeByIdParams struct {
	PhoneVerifyCode sql.NullString `json:"phone_verify_code"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateVerifyCodeById(ctx context.Context, arg UpdateVerifyCodeByIdParams) error {
	_, err := q.exec(ctx, q.updateVerifyCodeByIdStmt, updateVerifyCodeById, arg.PhoneVerifyCode, arg.ID)
	return err
}

const updateVerifyStatusById = `-- name: UpdateVerifyStatusById :exec
UPDATE users SET phone_verified = $2
WHERE id = $1
`

type UpdateVerifyStatusByIdParams struct {
	ID            int64        `json:"id"`
	PhoneVerified sql.NullBool `json:"phone_verified"`
}

func (q *Queries) UpdateVerifyStatusById(ctx context.Context, arg UpdateVerifyStatusByIdParams) error {
	_, err := q.exec(ctx, q.updateVerifyStatusByIdStmt, updateVerifyStatusById, arg.ID, arg.PhoneVerified)
	return err
}
