// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
	"github.com/huangc28/go-darkpanda-backend/ent/service"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks      []Hook
	mutation   *ServiceMutation
	predicates []predicate.Service
}

// Where adds a new predicate for the builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetUUID sets the uuid field.
func (su *ServiceUpdate) SetUUID(u uuid.UUID) *ServiceUpdate {
	su.mutation.SetUUID(u)
	return su
}

// SetPrice sets the price field.
func (su *ServiceUpdate) SetPrice(f float32) *ServiceUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(f)
	return su
}

// AddPrice adds f to price.
func (su *ServiceUpdate) AddPrice(f float32) *ServiceUpdate {
	su.mutation.AddPrice(f)
	return su
}

// SetDuration sets the duration field.
func (su *ServiceUpdate) SetDuration(i int) *ServiceUpdate {
	su.mutation.ResetDuration()
	su.mutation.SetDuration(i)
	return su
}

// AddDuration adds i to duration.
func (su *ServiceUpdate) AddDuration(i int) *ServiceUpdate {
	su.mutation.AddDuration(i)
	return su
}

// SetAppointmentTime sets the appointment_time field.
func (su *ServiceUpdate) SetAppointmentTime(t time.Time) *ServiceUpdate {
	su.mutation.SetAppointmentTime(t)
	return su
}

// SetLng sets the lng field.
func (su *ServiceUpdate) SetLng(f float64) *ServiceUpdate {
	su.mutation.ResetLng()
	su.mutation.SetLng(f)
	return su
}

// AddLng adds f to lng.
func (su *ServiceUpdate) AddLng(f float64) *ServiceUpdate {
	su.mutation.AddLng(f)
	return su
}

// SetLat sets the lat field.
func (su *ServiceUpdate) SetLat(f float64) *ServiceUpdate {
	su.mutation.ResetLat()
	su.mutation.SetLat(f)
	return su
}

// AddLat adds f to lat.
func (su *ServiceUpdate) AddLat(f float64) *ServiceUpdate {
	su.mutation.AddLat(f)
	return su
}

// SetServiceType sets the service_type field.
func (su *ServiceUpdate) SetServiceType(st service.ServiceType) *ServiceUpdate {
	su.mutation.SetServiceType(st)
	return su
}

// SetServiceStatus sets the service_status field.
func (su *ServiceUpdate) SetServiceStatus(ss service.ServiceStatus) *ServiceUpdate {
	su.mutation.SetServiceStatus(ss)
	return su
}

// SetNillableServiceStatus sets the service_status field if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceStatus(ss *service.ServiceStatus) *ServiceUpdate {
	if ss != nil {
		su.SetServiceStatus(*ss)
	}
	return su
}

// ClearServiceStatus clears the value of service_status.
func (su *ServiceUpdate) ClearServiceStatus() *ServiceUpdate {
	su.mutation.ClearServiceStatus()
	return su
}

// SetGirlReady sets the girl_ready field.
func (su *ServiceUpdate) SetGirlReady(b bool) *ServiceUpdate {
	su.mutation.SetGirlReady(b)
	return su
}

// SetNillableGirlReady sets the girl_ready field if the given value is not nil.
func (su *ServiceUpdate) SetNillableGirlReady(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetGirlReady(*b)
	}
	return su
}

// SetManReady sets the man_ready field.
func (su *ServiceUpdate) SetManReady(b bool) *ServiceUpdate {
	su.mutation.SetManReady(b)
	return su
}

// SetNillableManReady sets the man_ready field if the given value is not nil.
func (su *ServiceUpdate) SetNillableManReady(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetManReady(*b)
	}
	return su
}

// SetCreatedAt sets the created_at field.
func (su *ServiceUpdate) SetCreatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (su *ServiceUpdate) SetNillableCreatedAt(t *time.Time) *ServiceUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the updated_at field.
func (su *ServiceUpdate) SetUpdatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetCustomerID sets the customer edge to User by id.
func (su *ServiceUpdate) SetCustomerID(id int) *ServiceUpdate {
	su.mutation.SetCustomerID(id)
	return su
}

// SetNillableCustomerID sets the customer edge to User by id if the given value is not nil.
func (su *ServiceUpdate) SetNillableCustomerID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetCustomerID(*id)
	}
	return su
}

// SetCustomer sets the customer edge to User.
func (su *ServiceUpdate) SetCustomer(u *User) *ServiceUpdate {
	return su.SetCustomerID(u.ID)
}

// SetServiceProviderID sets the service_provider edge to User by id.
func (su *ServiceUpdate) SetServiceProviderID(id int) *ServiceUpdate {
	su.mutation.SetServiceProviderID(id)
	return su
}

// SetNillableServiceProviderID sets the service_provider edge to User by id if the given value is not nil.
func (su *ServiceUpdate) SetNillableServiceProviderID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetServiceProviderID(*id)
	}
	return su
}

// SetServiceProvider sets the service_provider edge to User.
func (su *ServiceUpdate) SetServiceProvider(u *User) *ServiceUpdate {
	return su.SetServiceProviderID(u.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearCustomer clears the customer edge to User.
func (su *ServiceUpdate) ClearCustomer() *ServiceUpdate {
	su.mutation.ClearCustomer()
	return su
}

// ClearServiceProvider clears the service_provider edge to User.
func (su *ServiceUpdate) ClearServiceProvider() *ServiceUpdate {
	su.mutation.ClearServiceProvider()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.ServiceType(); ok {
		if err := service.ServiceTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "service_type", err: fmt.Errorf("ent: validator failed for field \"service_type\": %w", err)}
		}
	}
	if v, ok := su.mutation.ServiceStatus(); ok {
		if err := service.ServiceStatusValidator(v); err != nil {
			return 0, &ValidationError{Name: "service_status", err: fmt.Errorf("ent: validator failed for field \"service_status\": %w", err)}
		}
	}
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: service.FieldUUID,
		})
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: service.FieldPrice,
		})
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: service.FieldPrice,
		})
	}
	if value, ok := su.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldDuration,
		})
	}
	if value, ok := su.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldDuration,
		})
	}
	if value, ok := su.mutation.AppointmentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldAppointmentTime,
		})
	}
	if value, ok := su.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLng,
		})
	}
	if value, ok := su.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLng,
		})
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLat,
		})
	}
	if value, ok := su.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLat,
		})
	}
	if value, ok := su.mutation.ServiceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceType,
		})
	}
	if value, ok := su.mutation.ServiceStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceStatus,
		})
	}
	if su.mutation.ServiceStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: service.FieldServiceStatus,
		})
	}
	if value, ok := su.mutation.GirlReady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldGirlReady,
		})
	}
	if value, ok := su.mutation.ManReady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldManReady,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldUpdatedAt,
		})
	}
	if su.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.CustomerTable,
			Columns: []string{service.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.CustomerTable,
			Columns: []string{service.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ServiceProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.ServiceProviderTable,
			Columns: []string{service.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.ServiceProviderTable,
			Columns: []string{service.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// SetUUID sets the uuid field.
func (suo *ServiceUpdateOne) SetUUID(u uuid.UUID) *ServiceUpdateOne {
	suo.mutation.SetUUID(u)
	return suo
}

// SetPrice sets the price field.
func (suo *ServiceUpdateOne) SetPrice(f float32) *ServiceUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(f)
	return suo
}

// AddPrice adds f to price.
func (suo *ServiceUpdateOne) AddPrice(f float32) *ServiceUpdateOne {
	suo.mutation.AddPrice(f)
	return suo
}

// SetDuration sets the duration field.
func (suo *ServiceUpdateOne) SetDuration(i int) *ServiceUpdateOne {
	suo.mutation.ResetDuration()
	suo.mutation.SetDuration(i)
	return suo
}

// AddDuration adds i to duration.
func (suo *ServiceUpdateOne) AddDuration(i int) *ServiceUpdateOne {
	suo.mutation.AddDuration(i)
	return suo
}

// SetAppointmentTime sets the appointment_time field.
func (suo *ServiceUpdateOne) SetAppointmentTime(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetAppointmentTime(t)
	return suo
}

// SetLng sets the lng field.
func (suo *ServiceUpdateOne) SetLng(f float64) *ServiceUpdateOne {
	suo.mutation.ResetLng()
	suo.mutation.SetLng(f)
	return suo
}

// AddLng adds f to lng.
func (suo *ServiceUpdateOne) AddLng(f float64) *ServiceUpdateOne {
	suo.mutation.AddLng(f)
	return suo
}

// SetLat sets the lat field.
func (suo *ServiceUpdateOne) SetLat(f float64) *ServiceUpdateOne {
	suo.mutation.ResetLat()
	suo.mutation.SetLat(f)
	return suo
}

// AddLat adds f to lat.
func (suo *ServiceUpdateOne) AddLat(f float64) *ServiceUpdateOne {
	suo.mutation.AddLat(f)
	return suo
}

// SetServiceType sets the service_type field.
func (suo *ServiceUpdateOne) SetServiceType(st service.ServiceType) *ServiceUpdateOne {
	suo.mutation.SetServiceType(st)
	return suo
}

// SetServiceStatus sets the service_status field.
func (suo *ServiceUpdateOne) SetServiceStatus(ss service.ServiceStatus) *ServiceUpdateOne {
	suo.mutation.SetServiceStatus(ss)
	return suo
}

// SetNillableServiceStatus sets the service_status field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceStatus(ss *service.ServiceStatus) *ServiceUpdateOne {
	if ss != nil {
		suo.SetServiceStatus(*ss)
	}
	return suo
}

// ClearServiceStatus clears the value of service_status.
func (suo *ServiceUpdateOne) ClearServiceStatus() *ServiceUpdateOne {
	suo.mutation.ClearServiceStatus()
	return suo
}

// SetGirlReady sets the girl_ready field.
func (suo *ServiceUpdateOne) SetGirlReady(b bool) *ServiceUpdateOne {
	suo.mutation.SetGirlReady(b)
	return suo
}

// SetNillableGirlReady sets the girl_ready field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableGirlReady(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetGirlReady(*b)
	}
	return suo
}

// SetManReady sets the man_ready field.
func (suo *ServiceUpdateOne) SetManReady(b bool) *ServiceUpdateOne {
	suo.mutation.SetManReady(b)
	return suo
}

// SetNillableManReady sets the man_ready field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableManReady(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetManReady(*b)
	}
	return suo
}

// SetCreatedAt sets the created_at field.
func (suo *ServiceUpdateOne) SetCreatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableCreatedAt(t *time.Time) *ServiceUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the updated_at field.
func (suo *ServiceUpdateOne) SetUpdatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetCustomerID sets the customer edge to User by id.
func (suo *ServiceUpdateOne) SetCustomerID(id int) *ServiceUpdateOne {
	suo.mutation.SetCustomerID(id)
	return suo
}

// SetNillableCustomerID sets the customer edge to User by id if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableCustomerID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetCustomerID(*id)
	}
	return suo
}

// SetCustomer sets the customer edge to User.
func (suo *ServiceUpdateOne) SetCustomer(u *User) *ServiceUpdateOne {
	return suo.SetCustomerID(u.ID)
}

// SetServiceProviderID sets the service_provider edge to User by id.
func (suo *ServiceUpdateOne) SetServiceProviderID(id int) *ServiceUpdateOne {
	suo.mutation.SetServiceProviderID(id)
	return suo
}

// SetNillableServiceProviderID sets the service_provider edge to User by id if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableServiceProviderID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetServiceProviderID(*id)
	}
	return suo
}

// SetServiceProvider sets the service_provider edge to User.
func (suo *ServiceUpdateOne) SetServiceProvider(u *User) *ServiceUpdateOne {
	return suo.SetServiceProviderID(u.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearCustomer clears the customer edge to User.
func (suo *ServiceUpdateOne) ClearCustomer() *ServiceUpdateOne {
	suo.mutation.ClearCustomer()
	return suo
}

// ClearServiceProvider clears the service_provider edge to User.
func (suo *ServiceUpdateOne) ClearServiceProvider() *ServiceUpdateOne {
	suo.mutation.ClearServiceProvider()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	if v, ok := suo.mutation.ServiceType(); ok {
		if err := service.ServiceTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "service_type", err: fmt.Errorf("ent: validator failed for field \"service_type\": %w", err)}
		}
	}
	if v, ok := suo.mutation.ServiceStatus(); ok {
		if err := service.ServiceStatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "service_status", err: fmt.Errorf("ent: validator failed for field \"service_status\": %w", err)}
		}
	}
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Service
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (s *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Service.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: service.FieldUUID,
		})
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: service.FieldPrice,
		})
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: service.FieldPrice,
		})
	}
	if value, ok := suo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldDuration,
		})
	}
	if value, ok := suo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldDuration,
		})
	}
	if value, ok := suo.mutation.AppointmentTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldAppointmentTime,
		})
	}
	if value, ok := suo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLng,
		})
	}
	if value, ok := suo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLng,
		})
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLat,
		})
	}
	if value, ok := suo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLat,
		})
	}
	if value, ok := suo.mutation.ServiceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceType,
		})
	}
	if value, ok := suo.mutation.ServiceStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceStatus,
		})
	}
	if suo.mutation.ServiceStatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: service.FieldServiceStatus,
		})
	}
	if value, ok := suo.mutation.GirlReady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldGirlReady,
		})
	}
	if value, ok := suo.mutation.ManReady(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldManReady,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldUpdatedAt,
		})
	}
	if suo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.CustomerTable,
			Columns: []string{service.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.CustomerTable,
			Columns: []string{service.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ServiceProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.ServiceProviderTable,
			Columns: []string{service.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.ServiceProviderTable,
			Columns: []string{service.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Service{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
