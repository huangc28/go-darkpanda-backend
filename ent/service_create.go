// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/huangc28/go-darkpanda-backend/ent/service"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
)

// ServiceCreate is the builder for creating a Service entity.
type ServiceCreate struct {
	config
	mutation *ServiceMutation
	hooks    []Hook
}

// SetUUID sets the uuid field.
func (sc *ServiceCreate) SetUUID(u uuid.UUID) *ServiceCreate {
	sc.mutation.SetUUID(u)
	return sc
}

// SetPrice sets the price field.
func (sc *ServiceCreate) SetPrice(f float32) *ServiceCreate {
	sc.mutation.SetPrice(f)
	return sc
}

// SetDuration sets the duration field.
func (sc *ServiceCreate) SetDuration(i int) *ServiceCreate {
	sc.mutation.SetDuration(i)
	return sc
}

// SetAppointmentTime sets the appointment_time field.
func (sc *ServiceCreate) SetAppointmentTime(t time.Time) *ServiceCreate {
	sc.mutation.SetAppointmentTime(t)
	return sc
}

// SetLng sets the lng field.
func (sc *ServiceCreate) SetLng(f float64) *ServiceCreate {
	sc.mutation.SetLng(f)
	return sc
}

// SetLat sets the lat field.
func (sc *ServiceCreate) SetLat(f float64) *ServiceCreate {
	sc.mutation.SetLat(f)
	return sc
}

// SetServiceType sets the service_type field.
func (sc *ServiceCreate) SetServiceType(st service.ServiceType) *ServiceCreate {
	sc.mutation.SetServiceType(st)
	return sc
}

// SetServiceStatus sets the service_status field.
func (sc *ServiceCreate) SetServiceStatus(ss service.ServiceStatus) *ServiceCreate {
	sc.mutation.SetServiceStatus(ss)
	return sc
}

// SetNillableServiceStatus sets the service_status field if the given value is not nil.
func (sc *ServiceCreate) SetNillableServiceStatus(ss *service.ServiceStatus) *ServiceCreate {
	if ss != nil {
		sc.SetServiceStatus(*ss)
	}
	return sc
}

// SetGirlReady sets the girl_ready field.
func (sc *ServiceCreate) SetGirlReady(b bool) *ServiceCreate {
	sc.mutation.SetGirlReady(b)
	return sc
}

// SetNillableGirlReady sets the girl_ready field if the given value is not nil.
func (sc *ServiceCreate) SetNillableGirlReady(b *bool) *ServiceCreate {
	if b != nil {
		sc.SetGirlReady(*b)
	}
	return sc
}

// SetManReady sets the man_ready field.
func (sc *ServiceCreate) SetManReady(b bool) *ServiceCreate {
	sc.mutation.SetManReady(b)
	return sc
}

// SetNillableManReady sets the man_ready field if the given value is not nil.
func (sc *ServiceCreate) SetNillableManReady(b *bool) *ServiceCreate {
	if b != nil {
		sc.SetManReady(*b)
	}
	return sc
}

// SetCreatedAt sets the created_at field.
func (sc *ServiceCreate) SetCreatedAt(t time.Time) *ServiceCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (sc *ServiceCreate) SetNillableCreatedAt(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the updated_at field.
func (sc *ServiceCreate) SetUpdatedAt(t time.Time) *ServiceCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (sc *ServiceCreate) SetNillableUpdatedAt(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCustomerID sets the customer edge to User by id.
func (sc *ServiceCreate) SetCustomerID(id int) *ServiceCreate {
	sc.mutation.SetCustomerID(id)
	return sc
}

// SetNillableCustomerID sets the customer edge to User by id if the given value is not nil.
func (sc *ServiceCreate) SetNillableCustomerID(id *int) *ServiceCreate {
	if id != nil {
		sc = sc.SetCustomerID(*id)
	}
	return sc
}

// SetCustomer sets the customer edge to User.
func (sc *ServiceCreate) SetCustomer(u *User) *ServiceCreate {
	return sc.SetCustomerID(u.ID)
}

// SetServiceProviderID sets the service_provider edge to User by id.
func (sc *ServiceCreate) SetServiceProviderID(id int) *ServiceCreate {
	sc.mutation.SetServiceProviderID(id)
	return sc
}

// SetNillableServiceProviderID sets the service_provider edge to User by id if the given value is not nil.
func (sc *ServiceCreate) SetNillableServiceProviderID(id *int) *ServiceCreate {
	if id != nil {
		sc = sc.SetServiceProviderID(*id)
	}
	return sc
}

// SetServiceProvider sets the service_provider edge to User.
func (sc *ServiceCreate) SetServiceProvider(u *User) *ServiceCreate {
	return sc.SetServiceProviderID(u.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (sc *ServiceCreate) Mutation() *ServiceMutation {
	return sc.mutation
}

// Save creates the Service in the database.
func (sc *ServiceCreate) Save(ctx context.Context) (*Service, error) {
	if err := sc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Service
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServiceCreate) SaveX(ctx context.Context) *Service {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *ServiceCreate) preSave() error {
	if _, ok := sc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	if _, ok := sc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New("ent: missing required field \"duration\"")}
	}
	if _, ok := sc.mutation.AppointmentTime(); !ok {
		return &ValidationError{Name: "appointment_time", err: errors.New("ent: missing required field \"appointment_time\"")}
	}
	if _, ok := sc.mutation.Lng(); !ok {
		return &ValidationError{Name: "lng", err: errors.New("ent: missing required field \"lng\"")}
	}
	if _, ok := sc.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New("ent: missing required field \"lat\"")}
	}
	if _, ok := sc.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New("ent: missing required field \"service_type\"")}
	}
	if v, ok := sc.mutation.ServiceType(); ok {
		if err := service.ServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "service_type", err: fmt.Errorf("ent: validator failed for field \"service_type\": %w", err)}
		}
	}
	if v, ok := sc.mutation.ServiceStatus(); ok {
		if err := service.ServiceStatusValidator(v); err != nil {
			return &ValidationError{Name: "service_status", err: fmt.Errorf("ent: validator failed for field \"service_status\": %w", err)}
		}
	}
	if _, ok := sc.mutation.GirlReady(); !ok {
		v := service.DefaultGirlReady
		sc.mutation.SetGirlReady(v)
	}
	if _, ok := sc.mutation.ManReady(); !ok {
		v := service.DefaultManReady
		sc.mutation.SetManReady(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := service.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := service.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (sc *ServiceCreate) sqlSave(ctx context.Context) (*Service, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *ServiceCreate) createSpec() (*Service, *sqlgraph.CreateSpec) {
	var (
		s     = &Service{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: service.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: service.FieldUUID,
		})
		s.UUID = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: service.FieldPrice,
		})
		s.Price = value
	}
	if value, ok := sc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: service.FieldDuration,
		})
		s.Duration = value
	}
	if value, ok := sc.mutation.AppointmentTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldAppointmentTime,
		})
		s.AppointmentTime = value
	}
	if value, ok := sc.mutation.Lng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLng,
		})
		s.Lng = value
	}
	if value, ok := sc.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: service.FieldLat,
		})
		s.Lat = value
	}
	if value, ok := sc.mutation.ServiceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceType,
		})
		s.ServiceType = value
	}
	if value, ok := sc.mutation.ServiceStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: service.FieldServiceStatus,
		})
		s.ServiceStatus = value
	}
	if value, ok := sc.mutation.GirlReady(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldGirlReady,
		})
		s.GirlReady = value
	}
	if value, ok := sc.mutation.ManReady(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: service.FieldManReady,
		})
		s.ManReady = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldCreatedAt,
		})
		s.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: service.FieldUpdatedAt,
		})
		s.UpdatedAt = value
	}
	if nodes := sc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.CustomerTable,
			Columns: []string{service.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ServiceProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   service.ServiceProviderTable,
			Columns: []string{service.ServiceProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}

// ServiceCreateBulk is the builder for creating a bulk of Service entities.
type ServiceCreateBulk struct {
	config
	builders []*ServiceCreate
}

// Save creates the Service entities in the database.
func (scb *ServiceCreateBulk) Save(ctx context.Context) ([]*Service, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Service, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*ServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *ServiceCreateBulk) SaveX(ctx context.Context) []*Service {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
