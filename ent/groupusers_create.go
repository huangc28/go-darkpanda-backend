// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/groupusers"
)

// GroupUsersCreate is the builder for creating a GroupUsers entity.
type GroupUsersCreate struct {
	config
	mutation *GroupUsersMutation
	hooks    []Hook
}

// SetAuthType sets the auth_type field.
func (guc *GroupUsersCreate) SetAuthType(gt groupusers.AuthType) *GroupUsersCreate {
	guc.mutation.SetAuthType(gt)
	return guc
}

// Mutation returns the GroupUsersMutation object of the builder.
func (guc *GroupUsersCreate) Mutation() *GroupUsersMutation {
	return guc.mutation
}

// Save creates the GroupUsers in the database.
func (guc *GroupUsersCreate) Save(ctx context.Context) (*GroupUsers, error) {
	if err := guc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *GroupUsers
	)
	if len(guc.hooks) == 0 {
		node, err = guc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guc.mutation = mutation
			node, err = guc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guc.hooks) - 1; i >= 0; i-- {
			mut = guc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GroupUsersCreate) SaveX(ctx context.Context) *GroupUsers {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (guc *GroupUsersCreate) preSave() error {
	if _, ok := guc.mutation.AuthType(); !ok {
		return &ValidationError{Name: "auth_type", err: errors.New("ent: missing required field \"auth_type\"")}
	}
	if v, ok := guc.mutation.AuthType(); ok {
		if err := groupusers.AuthTypeValidator(v); err != nil {
			return &ValidationError{Name: "auth_type", err: fmt.Errorf("ent: validator failed for field \"auth_type\": %w", err)}
		}
	}
	return nil
}

func (guc *GroupUsersCreate) sqlSave(ctx context.Context) (*GroupUsers, error) {
	gu, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	gu.ID = int(id)
	return gu, nil
}

func (guc *GroupUsersCreate) createSpec() (*GroupUsers, *sqlgraph.CreateSpec) {
	var (
		gu    = &GroupUsers{config: guc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groupusers.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupusers.FieldID,
			},
		}
	)
	if value, ok := guc.mutation.AuthType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: groupusers.FieldAuthType,
		})
		gu.AuthType = value
	}
	return gu, _spec
}

// GroupUsersCreateBulk is the builder for creating a bulk of GroupUsers entities.
type GroupUsersCreateBulk struct {
	config
	builders []*GroupUsersCreate
}

// Save creates the GroupUsers entities in the database.
func (gucb *GroupUsersCreateBulk) Save(ctx context.Context) ([]*GroupUsers, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GroupUsers, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*GroupUsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (gucb *GroupUsersCreateBulk) SaveX(ctx context.Context) []*GroupUsers {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
