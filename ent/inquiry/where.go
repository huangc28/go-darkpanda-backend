// Code generated by entc, DO NOT EDIT.

package inquiry

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Budget applies equality check predicate on the "budget" field. It's identical to BudgetEQ.
func Budget(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudget), v))
	})
}

// BudgetEQ applies the EQ predicate on the "budget" field.
func BudgetEQ(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBudget), v))
	})
}

// BudgetNEQ applies the NEQ predicate on the "budget" field.
func BudgetNEQ(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBudget), v))
	})
}

// BudgetIn applies the In predicate on the "budget" field.
func BudgetIn(vs ...float32) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBudget), v...))
	})
}

// BudgetNotIn applies the NotIn predicate on the "budget" field.
func BudgetNotIn(vs ...float32) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBudget), v...))
	})
}

// BudgetGT applies the GT predicate on the "budget" field.
func BudgetGT(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBudget), v))
	})
}

// BudgetGTE applies the GTE predicate on the "budget" field.
func BudgetGTE(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBudget), v))
	})
}

// BudgetLT applies the LT predicate on the "budget" field.
func BudgetLT(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBudget), v))
	})
}

// BudgetLTE applies the LTE predicate on the "budget" field.
func BudgetLTE(v float32) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBudget), v))
	})
}

// ServiceTypeEQ applies the EQ predicate on the "service_type" field.
func ServiceTypeEQ(v ServiceType) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServiceType), v))
	})
}

// ServiceTypeNEQ applies the NEQ predicate on the "service_type" field.
func ServiceTypeNEQ(v ServiceType) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServiceType), v))
	})
}

// ServiceTypeIn applies the In predicate on the "service_type" field.
func ServiceTypeIn(vs ...ServiceType) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServiceType), v...))
	})
}

// ServiceTypeNotIn applies the NotIn predicate on the "service_type" field.
func ServiceTypeNotIn(vs ...ServiceType) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServiceType), v...))
	})
}

// InquiryStatusEQ applies the EQ predicate on the "inquiry_status" field.
func InquiryStatusEQ(v InquiryStatus) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInquiryStatus), v))
	})
}

// InquiryStatusNEQ applies the NEQ predicate on the "inquiry_status" field.
func InquiryStatusNEQ(v InquiryStatus) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInquiryStatus), v))
	})
}

// InquiryStatusIn applies the In predicate on the "inquiry_status" field.
func InquiryStatusIn(vs ...InquiryStatus) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInquiryStatus), v...))
	})
}

// InquiryStatusNotIn applies the NotIn predicate on the "inquiry_status" field.
func InquiryStatusNotIn(vs ...InquiryStatus) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInquiryStatus), v...))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		p(s.Not())
	})
}
