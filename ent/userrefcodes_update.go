// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
	"github.com/huangc28/go-darkpanda-backend/ent/userrefcodes"
)

// UserRefCodesUpdate is the builder for updating UserRefCodes entities.
type UserRefCodesUpdate struct {
	config
	hooks      []Hook
	mutation   *UserRefCodesMutation
	predicates []predicate.UserRefCodes
}

// Where adds a new predicate for the builder.
func (urcu *UserRefCodesUpdate) Where(ps ...predicate.UserRefCodes) *UserRefCodesUpdate {
	urcu.predicates = append(urcu.predicates, ps...)
	return urcu
}

// SetRefCode sets the ref_code field.
func (urcu *UserRefCodesUpdate) SetRefCode(s string) *UserRefCodesUpdate {
	urcu.mutation.SetRefCode(s)
	return urcu
}

// SetRefCodeType sets the ref_code_type field.
func (urcu *UserRefCodesUpdate) SetRefCodeType(uct userrefcodes.RefCodeType) *UserRefCodesUpdate {
	urcu.mutation.SetRefCodeType(uct)
	return urcu
}

// SetUsersID sets the users edge to User by id.
func (urcu *UserRefCodesUpdate) SetUsersID(id int) *UserRefCodesUpdate {
	urcu.mutation.SetUsersID(id)
	return urcu
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (urcu *UserRefCodesUpdate) SetNillableUsersID(id *int) *UserRefCodesUpdate {
	if id != nil {
		urcu = urcu.SetUsersID(*id)
	}
	return urcu
}

// SetUsers sets the users edge to User.
func (urcu *UserRefCodesUpdate) SetUsers(u *User) *UserRefCodesUpdate {
	return urcu.SetUsersID(u.ID)
}

// SetRefcodeInviteeID sets the refcode_invitee edge to User by id.
func (urcu *UserRefCodesUpdate) SetRefcodeInviteeID(id int) *UserRefCodesUpdate {
	urcu.mutation.SetRefcodeInviteeID(id)
	return urcu
}

// SetNillableRefcodeInviteeID sets the refcode_invitee edge to User by id if the given value is not nil.
func (urcu *UserRefCodesUpdate) SetNillableRefcodeInviteeID(id *int) *UserRefCodesUpdate {
	if id != nil {
		urcu = urcu.SetRefcodeInviteeID(*id)
	}
	return urcu
}

// SetRefcodeInvitee sets the refcode_invitee edge to User.
func (urcu *UserRefCodesUpdate) SetRefcodeInvitee(u *User) *UserRefCodesUpdate {
	return urcu.SetRefcodeInviteeID(u.ID)
}

// Mutation returns the UserRefCodesMutation object of the builder.
func (urcu *UserRefCodesUpdate) Mutation() *UserRefCodesMutation {
	return urcu.mutation
}

// ClearUsers clears the users edge to User.
func (urcu *UserRefCodesUpdate) ClearUsers() *UserRefCodesUpdate {
	urcu.mutation.ClearUsers()
	return urcu
}

// ClearRefcodeInvitee clears the refcode_invitee edge to User.
func (urcu *UserRefCodesUpdate) ClearRefcodeInvitee() *UserRefCodesUpdate {
	urcu.mutation.ClearRefcodeInvitee()
	return urcu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (urcu *UserRefCodesUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := urcu.mutation.RefCodeType(); ok {
		if err := userrefcodes.RefCodeTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "ref_code_type", err: fmt.Errorf("ent: validator failed for field \"ref_code_type\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(urcu.hooks) == 0 {
		affected, err = urcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserRefCodesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urcu.mutation = mutation
			affected, err = urcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(urcu.hooks) - 1; i >= 0; i-- {
			mut = urcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (urcu *UserRefCodesUpdate) SaveX(ctx context.Context) int {
	affected, err := urcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (urcu *UserRefCodesUpdate) Exec(ctx context.Context) error {
	_, err := urcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcu *UserRefCodesUpdate) ExecX(ctx context.Context) {
	if err := urcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (urcu *UserRefCodesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userrefcodes.Table,
			Columns: userrefcodes.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrefcodes.FieldID,
			},
		},
	}
	if ps := urcu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := urcu.mutation.RefCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrefcodes.FieldRefCode,
		})
	}
	if value, ok := urcu.mutation.RefCodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userrefcodes.FieldRefCodeType,
		})
	}
	if urcu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrefcodes.UsersTable,
			Columns: []string{userrefcodes.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := urcu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrefcodes.UsersTable,
			Columns: []string{userrefcodes.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if urcu.mutation.RefcodeInviteeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrefcodes.RefcodeInviteeTable,
			Columns: []string{userrefcodes.RefcodeInviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := urcu.mutation.RefcodeInviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrefcodes.RefcodeInviteeTable,
			Columns: []string{userrefcodes.RefcodeInviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, urcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrefcodes.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserRefCodesUpdateOne is the builder for updating a single UserRefCodes entity.
type UserRefCodesUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserRefCodesMutation
}

// SetRefCode sets the ref_code field.
func (urcuo *UserRefCodesUpdateOne) SetRefCode(s string) *UserRefCodesUpdateOne {
	urcuo.mutation.SetRefCode(s)
	return urcuo
}

// SetRefCodeType sets the ref_code_type field.
func (urcuo *UserRefCodesUpdateOne) SetRefCodeType(uct userrefcodes.RefCodeType) *UserRefCodesUpdateOne {
	urcuo.mutation.SetRefCodeType(uct)
	return urcuo
}

// SetUsersID sets the users edge to User by id.
func (urcuo *UserRefCodesUpdateOne) SetUsersID(id int) *UserRefCodesUpdateOne {
	urcuo.mutation.SetUsersID(id)
	return urcuo
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (urcuo *UserRefCodesUpdateOne) SetNillableUsersID(id *int) *UserRefCodesUpdateOne {
	if id != nil {
		urcuo = urcuo.SetUsersID(*id)
	}
	return urcuo
}

// SetUsers sets the users edge to User.
func (urcuo *UserRefCodesUpdateOne) SetUsers(u *User) *UserRefCodesUpdateOne {
	return urcuo.SetUsersID(u.ID)
}

// SetRefcodeInviteeID sets the refcode_invitee edge to User by id.
func (urcuo *UserRefCodesUpdateOne) SetRefcodeInviteeID(id int) *UserRefCodesUpdateOne {
	urcuo.mutation.SetRefcodeInviteeID(id)
	return urcuo
}

// SetNillableRefcodeInviteeID sets the refcode_invitee edge to User by id if the given value is not nil.
func (urcuo *UserRefCodesUpdateOne) SetNillableRefcodeInviteeID(id *int) *UserRefCodesUpdateOne {
	if id != nil {
		urcuo = urcuo.SetRefcodeInviteeID(*id)
	}
	return urcuo
}

// SetRefcodeInvitee sets the refcode_invitee edge to User.
func (urcuo *UserRefCodesUpdateOne) SetRefcodeInvitee(u *User) *UserRefCodesUpdateOne {
	return urcuo.SetRefcodeInviteeID(u.ID)
}

// Mutation returns the UserRefCodesMutation object of the builder.
func (urcuo *UserRefCodesUpdateOne) Mutation() *UserRefCodesMutation {
	return urcuo.mutation
}

// ClearUsers clears the users edge to User.
func (urcuo *UserRefCodesUpdateOne) ClearUsers() *UserRefCodesUpdateOne {
	urcuo.mutation.ClearUsers()
	return urcuo
}

// ClearRefcodeInvitee clears the refcode_invitee edge to User.
func (urcuo *UserRefCodesUpdateOne) ClearRefcodeInvitee() *UserRefCodesUpdateOne {
	urcuo.mutation.ClearRefcodeInvitee()
	return urcuo
}

// Save executes the query and returns the updated entity.
func (urcuo *UserRefCodesUpdateOne) Save(ctx context.Context) (*UserRefCodes, error) {
	if v, ok := urcuo.mutation.RefCodeType(); ok {
		if err := userrefcodes.RefCodeTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "ref_code_type", err: fmt.Errorf("ent: validator failed for field \"ref_code_type\": %w", err)}
		}
	}

	var (
		err  error
		node *UserRefCodes
	)
	if len(urcuo.hooks) == 0 {
		node, err = urcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserRefCodesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urcuo.mutation = mutation
			node, err = urcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(urcuo.hooks) - 1; i >= 0; i-- {
			mut = urcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (urcuo *UserRefCodesUpdateOne) SaveX(ctx context.Context) *UserRefCodes {
	urc, err := urcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return urc
}

// Exec executes the query on the entity.
func (urcuo *UserRefCodesUpdateOne) Exec(ctx context.Context) error {
	_, err := urcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urcuo *UserRefCodesUpdateOne) ExecX(ctx context.Context) {
	if err := urcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (urcuo *UserRefCodesUpdateOne) sqlSave(ctx context.Context) (urc *UserRefCodes, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userrefcodes.Table,
			Columns: userrefcodes.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrefcodes.FieldID,
			},
		},
	}
	id, ok := urcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserRefCodes.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := urcuo.mutation.RefCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrefcodes.FieldRefCode,
		})
	}
	if value, ok := urcuo.mutation.RefCodeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userrefcodes.FieldRefCodeType,
		})
	}
	if urcuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrefcodes.UsersTable,
			Columns: []string{userrefcodes.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := urcuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrefcodes.UsersTable,
			Columns: []string{userrefcodes.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if urcuo.mutation.RefcodeInviteeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrefcodes.RefcodeInviteeTable,
			Columns: []string{userrefcodes.RefcodeInviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := urcuo.mutation.RefcodeInviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrefcodes.RefcodeInviteeTable,
			Columns: []string{userrefcodes.RefcodeInviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	urc = &UserRefCodes{config: urcuo.config}
	_spec.Assign = urc.assignValues
	_spec.ScanValues = urc.scanValues()
	if err = sqlgraph.UpdateNode(ctx, urcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userrefcodes.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return urc, nil
}
