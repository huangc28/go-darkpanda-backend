// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/groupusers"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
)

// GroupUsersQuery is the builder for querying GroupUsers entities.
type GroupUsersQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.GroupUsers
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (guq *GroupUsersQuery) Where(ps ...predicate.GroupUsers) *GroupUsersQuery {
	guq.predicates = append(guq.predicates, ps...)
	return guq
}

// Limit adds a limit step to the query.
func (guq *GroupUsersQuery) Limit(limit int) *GroupUsersQuery {
	guq.limit = &limit
	return guq
}

// Offset adds an offset step to the query.
func (guq *GroupUsersQuery) Offset(offset int) *GroupUsersQuery {
	guq.offset = &offset
	return guq
}

// Order adds an order step to the query.
func (guq *GroupUsersQuery) Order(o ...OrderFunc) *GroupUsersQuery {
	guq.order = append(guq.order, o...)
	return guq
}

// First returns the first GroupUsers entity in the query. Returns *NotFoundError when no groupusers was found.
func (guq *GroupUsersQuery) First(ctx context.Context) (*GroupUsers, error) {
	gus, err := guq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(gus) == 0 {
		return nil, &NotFoundError{groupusers.Label}
	}
	return gus[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (guq *GroupUsersQuery) FirstX(ctx context.Context) *GroupUsers {
	gu, err := guq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return gu
}

// FirstID returns the first GroupUsers id in the query. Returns *NotFoundError when no id was found.
func (guq *GroupUsersQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = guq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{groupusers.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (guq *GroupUsersQuery) FirstXID(ctx context.Context) int {
	id, err := guq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only GroupUsers entity in the query, returns an error if not exactly one entity was returned.
func (guq *GroupUsersQuery) Only(ctx context.Context) (*GroupUsers, error) {
	gus, err := guq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(gus) {
	case 1:
		return gus[0], nil
	case 0:
		return nil, &NotFoundError{groupusers.Label}
	default:
		return nil, &NotSingularError{groupusers.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (guq *GroupUsersQuery) OnlyX(ctx context.Context) *GroupUsers {
	gu, err := guq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return gu
}

// OnlyID returns the only GroupUsers id in the query, returns an error if not exactly one id was returned.
func (guq *GroupUsersQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = guq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = &NotSingularError{groupusers.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (guq *GroupUsersQuery) OnlyIDX(ctx context.Context) int {
	id, err := guq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroupUsersSlice.
func (guq *GroupUsersQuery) All(ctx context.Context) ([]*GroupUsers, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return guq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (guq *GroupUsersQuery) AllX(ctx context.Context) []*GroupUsers {
	gus, err := guq.All(ctx)
	if err != nil {
		panic(err)
	}
	return gus
}

// IDs executes the query and returns a list of GroupUsers ids.
func (guq *GroupUsersQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := guq.Select(groupusers.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (guq *GroupUsersQuery) IDsX(ctx context.Context) []int {
	ids, err := guq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (guq *GroupUsersQuery) Count(ctx context.Context) (int, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return guq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (guq *GroupUsersQuery) CountX(ctx context.Context) int {
	count, err := guq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (guq *GroupUsersQuery) Exist(ctx context.Context) (bool, error) {
	if err := guq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return guq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (guq *GroupUsersQuery) ExistX(ctx context.Context) bool {
	exist, err := guq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (guq *GroupUsersQuery) Clone() *GroupUsersQuery {
	return &GroupUsersQuery{
		config:     guq.config,
		limit:      guq.limit,
		offset:     guq.offset,
		order:      append([]OrderFunc{}, guq.order...),
		unique:     append([]string{}, guq.unique...),
		predicates: append([]predicate.GroupUsers{}, guq.predicates...),
		// clone intermediate query.
		sql:  guq.sql.Clone(),
		path: guq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AuthType groupusers.AuthType `json:"auth_type,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupUsers.Query().
//		GroupBy(groupusers.FieldAuthType).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (guq *GroupUsersQuery) GroupBy(field string, fields ...string) *GroupUsersGroupBy {
	group := &GroupUsersGroupBy{config: guq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := guq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return guq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		AuthType groupusers.AuthType `json:"auth_type,omitempty"`
//	}
//
//	client.GroupUsers.Query().
//		Select(groupusers.FieldAuthType).
//		Scan(ctx, &v)
//
func (guq *GroupUsersQuery) Select(field string, fields ...string) *GroupUsersSelect {
	selector := &GroupUsersSelect{config: guq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := guq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return guq.sqlQuery(), nil
	}
	return selector
}

func (guq *GroupUsersQuery) prepareQuery(ctx context.Context) error {
	if guq.path != nil {
		prev, err := guq.path(ctx)
		if err != nil {
			return err
		}
		guq.sql = prev
	}
	return nil
}

func (guq *GroupUsersQuery) sqlAll(ctx context.Context) ([]*GroupUsers, error) {
	var (
		nodes = []*GroupUsers{}
		_spec = guq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &GroupUsers{config: guq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, guq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (guq *GroupUsersQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := guq.querySpec()
	return sqlgraph.CountNodes(ctx, guq.driver, _spec)
}

func (guq *GroupUsersQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := guq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (guq *GroupUsersQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupusers.Table,
			Columns: groupusers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupusers.FieldID,
			},
		},
		From:   guq.sql,
		Unique: true,
	}
	if ps := guq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := guq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := guq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := guq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (guq *GroupUsersQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(guq.driver.Dialect())
	t1 := builder.Table(groupusers.Table)
	selector := builder.Select(t1.Columns(groupusers.Columns...)...).From(t1)
	if guq.sql != nil {
		selector = guq.sql
		selector.Select(selector.Columns(groupusers.Columns...)...)
	}
	for _, p := range guq.predicates {
		p(selector)
	}
	for _, p := range guq.order {
		p(selector)
	}
	if offset := guq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := guq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupUsersGroupBy is the builder for group-by GroupUsers entities.
type GroupUsersGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gugb *GroupUsersGroupBy) Aggregate(fns ...AggregateFunc) *GroupUsersGroupBy {
	gugb.fns = append(gugb.fns, fns...)
	return gugb
}

// Scan applies the group-by query and scan the result into the given value.
func (gugb *GroupUsersGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := gugb.path(ctx)
	if err != nil {
		return err
	}
	gugb.sql = query
	return gugb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := gugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(gugb.fields) > 1 {
		return nil, errors.New("ent: GroupUsersGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := gugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) StringsX(ctx context.Context) []string {
	v, err := gugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) StringX(ctx context.Context) string {
	v, err := gugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(gugb.fields) > 1 {
		return nil, errors.New("ent: GroupUsersGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := gugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) IntsX(ctx context.Context) []int {
	v, err := gugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) IntX(ctx context.Context) int {
	v, err := gugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(gugb.fields) > 1 {
		return nil, errors.New("ent: GroupUsersGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := gugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := gugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) Float64X(ctx context.Context) float64 {
	v, err := gugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(gugb.fields) > 1 {
		return nil, errors.New("ent: GroupUsersGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := gugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := gugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (gugb *GroupUsersGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gugb *GroupUsersGroupBy) BoolX(ctx context.Context) bool {
	v, err := gugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gugb *GroupUsersGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gugb.sqlQuery().Query()
	if err := gugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gugb *GroupUsersGroupBy) sqlQuery() *sql.Selector {
	selector := gugb.sql
	columns := make([]string, 0, len(gugb.fields)+len(gugb.fns))
	columns = append(columns, gugb.fields...)
	for _, fn := range gugb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(gugb.fields...)
}

// GroupUsersSelect is the builder for select fields of GroupUsers entities.
type GroupUsersSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (gus *GroupUsersSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := gus.path(ctx)
	if err != nil {
		return err
	}
	gus.sql = query
	return gus.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gus *GroupUsersSelect) ScanX(ctx context.Context, v interface{}) {
	if err := gus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Strings(ctx context.Context) ([]string, error) {
	if len(gus.fields) > 1 {
		return nil, errors.New("ent: GroupUsersSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gus *GroupUsersSelect) StringsX(ctx context.Context) []string {
	v, err := gus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = gus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (gus *GroupUsersSelect) StringX(ctx context.Context) string {
	v, err := gus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Ints(ctx context.Context) ([]int, error) {
	if len(gus.fields) > 1 {
		return nil, errors.New("ent: GroupUsersSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gus *GroupUsersSelect) IntsX(ctx context.Context) []int {
	v, err := gus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = gus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (gus *GroupUsersSelect) IntX(ctx context.Context) int {
	v, err := gus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gus.fields) > 1 {
		return nil, errors.New("ent: GroupUsersSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gus *GroupUsersSelect) Float64sX(ctx context.Context) []float64 {
	v, err := gus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = gus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (gus *GroupUsersSelect) Float64X(ctx context.Context) float64 {
	v, err := gus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gus.fields) > 1 {
		return nil, errors.New("ent: GroupUsersSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gus *GroupUsersSelect) BoolsX(ctx context.Context) []bool {
	v, err := gus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (gus *GroupUsersSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = gus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{groupusers.Label}
	default:
		err = fmt.Errorf("ent: GroupUsersSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (gus *GroupUsersSelect) BoolX(ctx context.Context) bool {
	v, err := gus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gus *GroupUsersSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gus.sqlQuery().Query()
	if err := gus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gus *GroupUsersSelect) sqlQuery() sql.Querier {
	selector := gus.sql
	selector.Select(selector.Columns(gus.fields...)...)
	return selector
}
