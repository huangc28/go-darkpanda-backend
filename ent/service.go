// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/huangc28/go-darkpanda-backend/ent/service"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// AppointmentTime holds the value of the "appointment_time" field.
	AppointmentTime time.Time `json:"appointment_time,omitempty"`
	// Lng holds the value of the "lng" field.
	Lng float64 `json:"lng,omitempty"`
	// Lat holds the value of the "lat" field.
	Lat float64 `json:"lat,omitempty"`
	// ServiceType holds the value of the "service_type" field.
	ServiceType service.ServiceType `json:"service_type,omitempty"`
	// ServiceStatus holds the value of the "service_status" field.
	ServiceStatus service.ServiceStatus `json:"service_status,omitempty"`
	// GirlReady holds the value of the "girl_ready" field.
	GirlReady bool `json:"girl_ready,omitempty"`
	// ManReady holds the value of the "man_ready" field.
	ManReady bool `json:"man_ready,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges               ServiceEdges `json:"edges"`
	customer_id         *int
	service_provider_id *int
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// Customer holds the value of the customer edge.
	Customer *User
	// ServiceProvider holds the value of the service_provider edge.
	ServiceProvider *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) CustomerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ServiceProviderOrErr returns the ServiceProvider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) ServiceProviderOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.ServiceProvider == nil {
			// The edge service_provider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ServiceProvider, nil
	}
	return nil, &NotLoadedError{edge: "service_provider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&uuid.UUID{},       // uuid
		&sql.NullFloat64{}, // price
		&sql.NullInt64{},   // duration
		&sql.NullTime{},    // appointment_time
		&sql.NullFloat64{}, // lng
		&sql.NullFloat64{}, // lat
		&sql.NullString{},  // service_type
		&sql.NullString{},  // service_status
		&sql.NullBool{},    // girl_ready
		&sql.NullBool{},    // man_ready
		&sql.NullTime{},    // created_at
		&sql.NullTime{},    // updated_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Service) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_id
		&sql.NullInt64{}, // service_provider_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(values ...interface{}) error {
	if m, n := len(values), len(service.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field uuid", values[0])
	} else if value != nil {
		s.UUID = *value
	}
	if value, ok := values[1].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field price", values[1])
	} else if value.Valid {
		s.Price = float32(value.Float64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field duration", values[2])
	} else if value.Valid {
		s.Duration = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field appointment_time", values[3])
	} else if value.Valid {
		s.AppointmentTime = value.Time
	}
	if value, ok := values[4].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field lng", values[4])
	} else if value.Valid {
		s.Lng = value.Float64
	}
	if value, ok := values[5].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field lat", values[5])
	} else if value.Valid {
		s.Lat = value.Float64
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_type", values[6])
	} else if value.Valid {
		s.ServiceType = service.ServiceType(value.String)
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field service_status", values[7])
	} else if value.Valid {
		s.ServiceStatus = service.ServiceStatus(value.String)
	}
	if value, ok := values[8].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field girl_ready", values[8])
	} else if value.Valid {
		s.GirlReady = value.Bool
	}
	if value, ok := values[9].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field man_ready", values[9])
	} else if value.Valid {
		s.ManReady = value.Bool
	}
	if value, ok := values[10].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[10])
	} else if value.Valid {
		s.CreatedAt = value.Time
	}
	if value, ok := values[11].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[11])
	} else if value.Valid {
		s.UpdatedAt = value.Time
	}
	values = values[12:]
	if len(values) == len(service.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_id", value)
		} else if value.Valid {
			s.customer_id = new(int)
			*s.customer_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field service_provider_id", value)
		} else if value.Valid {
			s.service_provider_id = new(int)
			*s.service_provider_id = int(value.Int64)
		}
	}
	return nil
}

// QueryCustomer queries the customer edge of the Service.
func (s *Service) QueryCustomer() *UserQuery {
	return (&ServiceClient{config: s.config}).QueryCustomer(s)
}

// QueryServiceProvider queries the service_provider edge of the Service.
func (s *Service) QueryServiceProvider() *UserQuery {
	return (&ServiceClient{config: s.config}).QueryServiceProvider(s)
}

// Update returns a builder for updating this Service.
// Note that, you need to call Service.Unwrap() before calling this method, if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return (&ServiceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", s.UUID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", s.Price))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", s.Duration))
	builder.WriteString(", appointment_time=")
	builder.WriteString(s.AppointmentTime.Format(time.ANSIC))
	builder.WriteString(", lng=")
	builder.WriteString(fmt.Sprintf("%v", s.Lng))
	builder.WriteString(", lat=")
	builder.WriteString(fmt.Sprintf("%v", s.Lat))
	builder.WriteString(", service_type=")
	builder.WriteString(fmt.Sprintf("%v", s.ServiceType))
	builder.WriteString(", service_status=")
	builder.WriteString(fmt.Sprintf("%v", s.ServiceStatus))
	builder.WriteString(", girl_ready=")
	builder.WriteString(fmt.Sprintf("%v", s.GirlReady))
	builder.WriteString(", man_ready=")
	builder.WriteString(fmt.Sprintf("%v", s.ManReady))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service

func (s Services) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
