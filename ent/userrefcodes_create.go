// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
	"github.com/huangc28/go-darkpanda-backend/ent/userrefcodes"
)

// UserRefCodesCreate is the builder for creating a UserRefCodes entity.
type UserRefCodesCreate struct {
	config
	mutation *UserRefCodesMutation
	hooks    []Hook
}

// SetRefCode sets the ref_code field.
func (urcc *UserRefCodesCreate) SetRefCode(s string) *UserRefCodesCreate {
	urcc.mutation.SetRefCode(s)
	return urcc
}

// SetRefCodeType sets the ref_code_type field.
func (urcc *UserRefCodesCreate) SetRefCodeType(uct userrefcodes.RefCodeType) *UserRefCodesCreate {
	urcc.mutation.SetRefCodeType(uct)
	return urcc
}

// SetUsersID sets the users edge to User by id.
func (urcc *UserRefCodesCreate) SetUsersID(id int) *UserRefCodesCreate {
	urcc.mutation.SetUsersID(id)
	return urcc
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (urcc *UserRefCodesCreate) SetNillableUsersID(id *int) *UserRefCodesCreate {
	if id != nil {
		urcc = urcc.SetUsersID(*id)
	}
	return urcc
}

// SetUsers sets the users edge to User.
func (urcc *UserRefCodesCreate) SetUsers(u *User) *UserRefCodesCreate {
	return urcc.SetUsersID(u.ID)
}

// SetRefcodeInviteeID sets the refcode_invitee edge to User by id.
func (urcc *UserRefCodesCreate) SetRefcodeInviteeID(id int) *UserRefCodesCreate {
	urcc.mutation.SetRefcodeInviteeID(id)
	return urcc
}

// SetNillableRefcodeInviteeID sets the refcode_invitee edge to User by id if the given value is not nil.
func (urcc *UserRefCodesCreate) SetNillableRefcodeInviteeID(id *int) *UserRefCodesCreate {
	if id != nil {
		urcc = urcc.SetRefcodeInviteeID(*id)
	}
	return urcc
}

// SetRefcodeInvitee sets the refcode_invitee edge to User.
func (urcc *UserRefCodesCreate) SetRefcodeInvitee(u *User) *UserRefCodesCreate {
	return urcc.SetRefcodeInviteeID(u.ID)
}

// Mutation returns the UserRefCodesMutation object of the builder.
func (urcc *UserRefCodesCreate) Mutation() *UserRefCodesMutation {
	return urcc.mutation
}

// Save creates the UserRefCodes in the database.
func (urcc *UserRefCodesCreate) Save(ctx context.Context) (*UserRefCodes, error) {
	if err := urcc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *UserRefCodes
	)
	if len(urcc.hooks) == 0 {
		node, err = urcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserRefCodesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			urcc.mutation = mutation
			node, err = urcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(urcc.hooks) - 1; i >= 0; i-- {
			mut = urcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, urcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (urcc *UserRefCodesCreate) SaveX(ctx context.Context) *UserRefCodes {
	v, err := urcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (urcc *UserRefCodesCreate) preSave() error {
	if _, ok := urcc.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New("ent: missing required field \"ref_code\"")}
	}
	if _, ok := urcc.mutation.RefCodeType(); !ok {
		return &ValidationError{Name: "ref_code_type", err: errors.New("ent: missing required field \"ref_code_type\"")}
	}
	if v, ok := urcc.mutation.RefCodeType(); ok {
		if err := userrefcodes.RefCodeTypeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code_type", err: fmt.Errorf("ent: validator failed for field \"ref_code_type\": %w", err)}
		}
	}
	return nil
}

func (urcc *UserRefCodesCreate) sqlSave(ctx context.Context) (*UserRefCodes, error) {
	urc, _spec := urcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	urc.ID = int(id)
	return urc, nil
}

func (urcc *UserRefCodesCreate) createSpec() (*UserRefCodes, *sqlgraph.CreateSpec) {
	var (
		urc   = &UserRefCodes{config: urcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userrefcodes.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrefcodes.FieldID,
			},
		}
	)
	if value, ok := urcc.mutation.RefCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userrefcodes.FieldRefCode,
		})
		urc.RefCode = value
	}
	if value, ok := urcc.mutation.RefCodeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: userrefcodes.FieldRefCodeType,
		})
		urc.RefCodeType = value
	}
	if nodes := urcc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userrefcodes.UsersTable,
			Columns: []string{userrefcodes.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := urcc.mutation.RefcodeInviteeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userrefcodes.RefcodeInviteeTable,
			Columns: []string{userrefcodes.RefcodeInviteeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return urc, _spec
}

// UserRefCodesCreateBulk is the builder for creating a bulk of UserRefCodes entities.
type UserRefCodesCreateBulk struct {
	config
	builders []*UserRefCodesCreate
}

// Save creates the UserRefCodes entities in the database.
func (urccb *UserRefCodesCreateBulk) Save(ctx context.Context) ([]*UserRefCodes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urccb.builders))
	nodes := make([]*UserRefCodes, len(urccb.builders))
	mutators := make([]Mutator, len(urccb.builders))
	for i := range urccb.builders {
		func(i int, root context.Context) {
			builder := urccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*UserRefCodesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (urccb *UserRefCodesCreateBulk) SaveX(ctx context.Context) []*UserRefCodes {
	v, err := urccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
