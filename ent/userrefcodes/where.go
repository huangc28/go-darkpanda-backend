// Code generated by entc, DO NOT EDIT.

package userrefcodes

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RefCode applies equality check predicate on the "ref_code" field. It's identical to RefCodeEQ.
func RefCode(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefCode), v))
	})
}

// RefCodeEQ applies the EQ predicate on the "ref_code" field.
func RefCodeEQ(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefCode), v))
	})
}

// RefCodeNEQ applies the NEQ predicate on the "ref_code" field.
func RefCodeNEQ(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefCode), v))
	})
}

// RefCodeIn applies the In predicate on the "ref_code" field.
func RefCodeIn(vs ...string) predicate.UserRefCodes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefCode), v...))
	})
}

// RefCodeNotIn applies the NotIn predicate on the "ref_code" field.
func RefCodeNotIn(vs ...string) predicate.UserRefCodes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefCode), v...))
	})
}

// RefCodeGT applies the GT predicate on the "ref_code" field.
func RefCodeGT(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefCode), v))
	})
}

// RefCodeGTE applies the GTE predicate on the "ref_code" field.
func RefCodeGTE(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefCode), v))
	})
}

// RefCodeLT applies the LT predicate on the "ref_code" field.
func RefCodeLT(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefCode), v))
	})
}

// RefCodeLTE applies the LTE predicate on the "ref_code" field.
func RefCodeLTE(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefCode), v))
	})
}

// RefCodeContains applies the Contains predicate on the "ref_code" field.
func RefCodeContains(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefCode), v))
	})
}

// RefCodeHasPrefix applies the HasPrefix predicate on the "ref_code" field.
func RefCodeHasPrefix(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefCode), v))
	})
}

// RefCodeHasSuffix applies the HasSuffix predicate on the "ref_code" field.
func RefCodeHasSuffix(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefCode), v))
	})
}

// RefCodeEqualFold applies the EqualFold predicate on the "ref_code" field.
func RefCodeEqualFold(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefCode), v))
	})
}

// RefCodeContainsFold applies the ContainsFold predicate on the "ref_code" field.
func RefCodeContainsFold(v string) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefCode), v))
	})
}

// RefCodeTypeEQ applies the EQ predicate on the "ref_code_type" field.
func RefCodeTypeEQ(v RefCodeType) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefCodeType), v))
	})
}

// RefCodeTypeNEQ applies the NEQ predicate on the "ref_code_type" field.
func RefCodeTypeNEQ(v RefCodeType) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefCodeType), v))
	})
}

// RefCodeTypeIn applies the In predicate on the "ref_code_type" field.
func RefCodeTypeIn(vs ...RefCodeType) predicate.UserRefCodes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefCodeType), v...))
	})
}

// RefCodeTypeNotIn applies the NotIn predicate on the "ref_code_type" field.
func RefCodeTypeNotIn(vs ...RefCodeType) predicate.UserRefCodes {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRefCodes(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefCodeType), v...))
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRefcodeInvitee applies the HasEdge predicate on the "refcode_invitee" edge.
func HasRefcodeInvitee() predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RefcodeInviteeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RefcodeInviteeTable, RefcodeInviteeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRefcodeInviteeWith applies the HasEdge predicate on the "refcode_invitee" edge with a given conditions (other predicates).
func HasRefcodeInviteeWith(preds ...predicate.User) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RefcodeInviteeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RefcodeInviteeTable, RefcodeInviteeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.UserRefCodes) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.UserRefCodes) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserRefCodes) predicate.UserRefCodes {
	return predicate.UserRefCodes(func(s *sql.Selector) {
		p(s.Not())
	})
}
