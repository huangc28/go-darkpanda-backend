// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/huangc28/go-darkpanda-backend/ent/groupusers"
)

// GroupUsers is the model entity for the GroupUsers schema.
type GroupUsers struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AuthType holds the value of the "auth_type" field.
	AuthType groupusers.AuthType `json:"auth_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupUsers) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // auth_type
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupUsers fields.
func (gu *GroupUsers) assignValues(values ...interface{}) error {
	if m, n := len(values), len(groupusers.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	gu.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field auth_type", values[0])
	} else if value.Valid {
		gu.AuthType = groupusers.AuthType(value.String)
	}
	return nil
}

// Update returns a builder for updating this GroupUsers.
// Note that, you need to call GroupUsers.Unwrap() before calling this method, if this GroupUsers
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *GroupUsers) Update() *GroupUsersUpdateOne {
	return (&GroupUsersClient{config: gu.config}).UpdateOne(gu)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gu *GroupUsers) Unwrap() *GroupUsers {
	tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupUsers is not a transactional entity")
	}
	gu.config.driver = tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *GroupUsers) String() string {
	var builder strings.Builder
	builder.WriteString("GroupUsers(")
	builder.WriteString(fmt.Sprintf("id=%v", gu.ID))
	builder.WriteString(", auth_type=")
	builder.WriteString(fmt.Sprintf("%v", gu.AuthType))
	builder.WriteByte(')')
	return builder.String()
}

// GroupUsersSlice is a parsable slice of GroupUsers.
type GroupUsersSlice []*GroupUsers

func (gu GroupUsersSlice) config(cfg config) {
	for _i := range gu {
		gu[_i].config = cfg
	}
}
