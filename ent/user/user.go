// Code generated by entc, DO NOT EDIT.

package user

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPhoneVerified holds the string denoting the phone_verified field in the database.
	FieldPhoneVerified = "phone_verified"
	// FieldAuthSmsCode holds the string denoting the auth_sms_code field in the database.
	FieldAuthSmsCode = "auth_sms_code"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldPremiumKind holds the string denoting the premium_kind field in the database.
	FieldPremiumKind = "premium_kind"
	// FieldPremiumExpiryDate holds the string denoting the premium_expiry_date field in the database.
	FieldPremiumExpiryDate = "premium_expiry_date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeRefcodeInvitor holds the string denoting the refcode_invitor edge name in mutations.
	EdgeRefcodeInvitor = "refcode_invitor"
	// EdgeUserrefcodes holds the string denoting the userrefcodes edge name in mutations.
	EdgeUserrefcodes = "userrefcodes"
	// EdgeInquiry holds the string denoting the inquiry edge name in mutations.
	EdgeInquiry = "inquiry"
	// EdgeServiceCustomer holds the string denoting the service_customer edge name in mutations.
	EdgeServiceCustomer = "service_customer"
	// EdgeServiceProvider holds the string denoting the service_provider edge name in mutations.
	EdgeServiceProvider = "service_provider"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"

	// Table holds the table name of the user in the database.
	Table = "users"
	// RefcodeInvitorTable is the table the holds the refcode_invitor relation/edge.
	RefcodeInvitorTable = "user_ref_codes"
	// RefcodeInvitorInverseTable is the table name for the UserRefCodes entity.
	// It exists in this package in order to avoid circular dependency with the "userrefcodes" package.
	RefcodeInvitorInverseTable = "user_ref_codes"
	// RefcodeInvitorColumn is the table column denoting the refcode_invitor relation/edge.
	RefcodeInvitorColumn = "invitor_id"
	// UserrefcodesTable is the table the holds the userrefcodes relation/edge.
	UserrefcodesTable = "user_ref_codes"
	// UserrefcodesInverseTable is the table name for the UserRefCodes entity.
	// It exists in this package in order to avoid circular dependency with the "userrefcodes" package.
	UserrefcodesInverseTable = "user_ref_codes"
	// UserrefcodesColumn is the table column denoting the userrefcodes relation/edge.
	UserrefcodesColumn = "invitee_id"
	// InquiryTable is the table the holds the inquiry relation/edge.
	InquiryTable = "inquiries"
	// InquiryInverseTable is the table name for the Inquiry entity.
	// It exists in this package in order to avoid circular dependency with the "inquiry" package.
	InquiryInverseTable = "inquiries"
	// InquiryColumn is the table column denoting the inquiry relation/edge.
	InquiryColumn = "inquirer_id"
	// ServiceCustomerTable is the table the holds the service_customer relation/edge.
	ServiceCustomerTable = "services"
	// ServiceCustomerInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceCustomerInverseTable = "services"
	// ServiceCustomerColumn is the table column denoting the service_customer relation/edge.
	ServiceCustomerColumn = "customer_id"
	// ServiceProviderTable is the table the holds the service_provider relation/edge.
	ServiceProviderTable = "services"
	// ServiceProviderInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ServiceProviderInverseTable = "services"
	// ServiceProviderColumn is the table column denoting the service_provider relation/edge.
	ServiceProviderColumn = "service_provider_id"
	// GroupsTable is the table the holds the groups relation/edge. The primary key declared below.
	GroupsTable = "group_users"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPhoneVerified,
	FieldAuthSmsCode,
	FieldGender,
	FieldPremiumKind,
	FieldPremiumExpiryDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// GroupsPrimaryKey and GroupsColumn2 are the table columns denoting the
	// primary key for the groups relation (M2M).
	GroupsPrimaryKey = []string{"group_id", "user_id"}
)

var (
	// DefaultPhoneVerified holds the default value on creation for the phone_verified field.
	DefaultPhoneVerified bool
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Gender defines the type for the gender enum field.
type Gender string

// Gender values.
const (
	GenderFemale Gender = "female"
	GenderMale   Gender = "male"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderFemale, GenderMale:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for gender field: %q", ge)
	}
}

// PremiumKind defines the type for the premium_kind enum field.
type PremiumKind string

// PremiumKind values.
const (
	PremiumKindNormal PremiumKind = "normal"
	PremiumKindPaid   PremiumKind = "paid"
)

func (pk PremiumKind) String() string {
	return string(pk)
}

// PremiumKindValidator is a validator for the "premium_kind" field enum values. It is called by the builders before save.
func PremiumKindValidator(pk PremiumKind) error {
	switch pk {
	case PremiumKindNormal, PremiumKindPaid:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for premium_kind field: %q", pk)
	}
}
