// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
	"github.com/huangc28/go-darkpanda-backend/ent/userrefcodes"
)

// UserRefCodes is the model entity for the UserRefCodes schema.
type UserRefCodes struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RefCode holds the value of the "ref_code" field.
	RefCode string `json:"ref_code,omitempty"`
	// RefCodeType holds the value of the "ref_code_type" field.
	RefCodeType userrefcodes.RefCodeType `json:"ref_code_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserRefCodesQuery when eager-loading is set.
	Edges      UserRefCodesEdges `json:"edges"`
	invitor_id *int
	invitee_id *int
}

// UserRefCodesEdges holds the relations/edges for other nodes in the graph.
type UserRefCodesEdges struct {
	// Users holds the value of the users edge.
	Users *User
	// RefcodeInvitee holds the value of the refcode_invitee edge.
	RefcodeInvitee *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserRefCodesEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Users == nil {
			// The edge users was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RefcodeInviteeOrErr returns the RefcodeInvitee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserRefCodesEdges) RefcodeInviteeOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.RefcodeInvitee == nil {
			// The edge refcode_invitee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.RefcodeInvitee, nil
	}
	return nil, &NotLoadedError{edge: "refcode_invitee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRefCodes) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // ref_code
		&sql.NullString{}, // ref_code_type
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UserRefCodes) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // invitor_id
		&sql.NullInt64{}, // invitee_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRefCodes fields.
func (urc *UserRefCodes) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userrefcodes.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	urc.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ref_code", values[0])
	} else if value.Valid {
		urc.RefCode = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ref_code_type", values[1])
	} else if value.Valid {
		urc.RefCodeType = userrefcodes.RefCodeType(value.String)
	}
	values = values[2:]
	if len(values) == len(userrefcodes.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field invitor_id", value)
		} else if value.Valid {
			urc.invitor_id = new(int)
			*urc.invitor_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field invitee_id", value)
		} else if value.Valid {
			urc.invitee_id = new(int)
			*urc.invitee_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUsers queries the users edge of the UserRefCodes.
func (urc *UserRefCodes) QueryUsers() *UserQuery {
	return (&UserRefCodesClient{config: urc.config}).QueryUsers(urc)
}

// QueryRefcodeInvitee queries the refcode_invitee edge of the UserRefCodes.
func (urc *UserRefCodes) QueryRefcodeInvitee() *UserQuery {
	return (&UserRefCodesClient{config: urc.config}).QueryRefcodeInvitee(urc)
}

// Update returns a builder for updating this UserRefCodes.
// Note that, you need to call UserRefCodes.Unwrap() before calling this method, if this UserRefCodes
// was returned from a transaction, and the transaction was committed or rolled back.
func (urc *UserRefCodes) Update() *UserRefCodesUpdateOne {
	return (&UserRefCodesClient{config: urc.config}).UpdateOne(urc)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (urc *UserRefCodes) Unwrap() *UserRefCodes {
	tx, ok := urc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserRefCodes is not a transactional entity")
	}
	urc.config.driver = tx.drv
	return urc
}

// String implements the fmt.Stringer.
func (urc *UserRefCodes) String() string {
	var builder strings.Builder
	builder.WriteString("UserRefCodes(")
	builder.WriteString(fmt.Sprintf("id=%v", urc.ID))
	builder.WriteString(", ref_code=")
	builder.WriteString(urc.RefCode)
	builder.WriteString(", ref_code_type=")
	builder.WriteString(fmt.Sprintf("%v", urc.RefCodeType))
	builder.WriteByte(')')
	return builder.String()
}

// UserRefCodesSlice is a parsable slice of UserRefCodes.
type UserRefCodesSlice []*UserRefCodes

func (urc UserRefCodesSlice) config(cfg config) {
	for _i := range urc {
		urc[_i].config = cfg
	}
}
