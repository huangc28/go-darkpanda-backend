// Code generated by entc, DO NOT EDIT.

package service

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the service type in the database.
	Label = "service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldAppointmentTime holds the string denoting the appointment_time field in the database.
	FieldAppointmentTime = "appointment_time"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldServiceType holds the string denoting the service_type field in the database.
	FieldServiceType = "service_type"
	// FieldServiceStatus holds the string denoting the service_status field in the database.
	FieldServiceStatus = "service_status"
	// FieldGirlReady holds the string denoting the girl_ready field in the database.
	FieldGirlReady = "girl_ready"
	// FieldManReady holds the string denoting the man_ready field in the database.
	FieldManReady = "man_ready"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeServiceProvider holds the string denoting the service_provider edge name in mutations.
	EdgeServiceProvider = "service_provider"

	// Table holds the table name of the service in the database.
	Table = "services"
	// CustomerTable is the table the holds the customer relation/edge.
	CustomerTable = "services"
	// CustomerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CustomerInverseTable = "users"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ServiceProviderTable is the table the holds the service_provider relation/edge.
	ServiceProviderTable = "services"
	// ServiceProviderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ServiceProviderInverseTable = "users"
	// ServiceProviderColumn is the table column denoting the service_provider relation/edge.
	ServiceProviderColumn = "service_provider_id"
)

// Columns holds all SQL columns for service fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldPrice,
	FieldDuration,
	FieldAppointmentTime,
	FieldLng,
	FieldLat,
	FieldServiceType,
	FieldServiceStatus,
	FieldGirlReady,
	FieldManReady,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Service type.
var ForeignKeys = []string{
	"customer_id",
	"service_provider_id",
}

var (
	// DefaultGirlReady holds the default value on creation for the girl_ready field.
	DefaultGirlReady bool
	// DefaultManReady holds the default value on creation for the man_ready field.
	DefaultManReady bool
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)

// ServiceType defines the type for the service_type enum field.
type ServiceType string

// ServiceType values.
const (
	ServiceTypeChat     ServiceType = "chat"
	ServiceTypeDiner    ServiceType = "diner"
	ServiceTypeMovie    ServiceType = "movie"
	ServiceTypeSex      ServiceType = "sex"
	ServiceTypeShopping ServiceType = "shopping"
)

func (st ServiceType) String() string {
	return string(st)
}

// ServiceTypeValidator is a validator for the "service_type" field enum values. It is called by the builders before save.
func ServiceTypeValidator(st ServiceType) error {
	switch st {
	case ServiceTypeChat, ServiceTypeDiner, ServiceTypeMovie, ServiceTypeSex, ServiceTypeShopping:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for service_type field: %q", st)
	}
}

// ServiceStatus defines the type for the service_status enum field.
type ServiceStatus string

// ServiceStatus values.
const (
	ServiceStatusCanceled        ServiceStatus = "canceled"
	ServiceStatusCompleted       ServiceStatus = "completed"
	ServiceStatusFailedDueToBoth ServiceStatus = "failed_due_to_both"
	ServiceStatusFailedDueToGirl ServiceStatus = "failed_due_to_girl"
	ServiceStatusFailedDueToMan  ServiceStatus = "failed_due_to_man"
	ServiceStatusFulfilling      ServiceStatus = "fulfilling"
	ServiceStatusGirlWaiting     ServiceStatus = "girl_waiting"
	ServiceStatusToBeFulfilled   ServiceStatus = "to_be_fulfilled"
)

func (ss ServiceStatus) String() string {
	return string(ss)
}

// ServiceStatusValidator is a validator for the "service_status" field enum values. It is called by the builders before save.
func ServiceStatusValidator(ss ServiceStatus) error {
	switch ss {
	case ServiceStatusCanceled, ServiceStatusCompleted, ServiceStatusFailedDueToBoth, ServiceStatusFailedDueToGirl, ServiceStatusFailedDueToMan, ServiceStatusFulfilling, ServiceStatusGirlWaiting, ServiceStatusToBeFulfilled:
		return nil
	default:
		return fmt.Errorf("service: invalid enum value for service_status field: %q", ss)
	}
}
