// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
	"github.com/huangc28/go-darkpanda-backend/ent/userrefcodes"
)

// UserRefCodesQuery is the builder for querying UserRefCodes entities.
type UserRefCodesQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.UserRefCodes
	// eager-loading edges.
	withUsers          *UserQuery
	withRefcodeInvitee *UserQuery
	withFKs            bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (urcq *UserRefCodesQuery) Where(ps ...predicate.UserRefCodes) *UserRefCodesQuery {
	urcq.predicates = append(urcq.predicates, ps...)
	return urcq
}

// Limit adds a limit step to the query.
func (urcq *UserRefCodesQuery) Limit(limit int) *UserRefCodesQuery {
	urcq.limit = &limit
	return urcq
}

// Offset adds an offset step to the query.
func (urcq *UserRefCodesQuery) Offset(offset int) *UserRefCodesQuery {
	urcq.offset = &offset
	return urcq
}

// Order adds an order step to the query.
func (urcq *UserRefCodesQuery) Order(o ...OrderFunc) *UserRefCodesQuery {
	urcq.order = append(urcq.order, o...)
	return urcq
}

// QueryUsers chains the current query on the users edge.
func (urcq *UserRefCodesQuery) QueryUsers() *UserQuery {
	query := &UserQuery{config: urcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := urcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userrefcodes.Table, userrefcodes.FieldID, urcq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userrefcodes.UsersTable, userrefcodes.UsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(urcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRefcodeInvitee chains the current query on the refcode_invitee edge.
func (urcq *UserRefCodesQuery) QueryRefcodeInvitee() *UserQuery {
	query := &UserQuery{config: urcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := urcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userrefcodes.Table, userrefcodes.FieldID, urcq.sqlQuery()),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userrefcodes.RefcodeInviteeTable, userrefcodes.RefcodeInviteeColumn),
		)
		fromU = sqlgraph.SetNeighbors(urcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserRefCodes entity in the query. Returns *NotFoundError when no userrefcodes was found.
func (urcq *UserRefCodesQuery) First(ctx context.Context) (*UserRefCodes, error) {
	urcs, err := urcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(urcs) == 0 {
		return nil, &NotFoundError{userrefcodes.Label}
	}
	return urcs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (urcq *UserRefCodesQuery) FirstX(ctx context.Context) *UserRefCodes {
	urc, err := urcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return urc
}

// FirstID returns the first UserRefCodes id in the query. Returns *NotFoundError when no id was found.
func (urcq *UserRefCodesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = urcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userrefcodes.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (urcq *UserRefCodesQuery) FirstXID(ctx context.Context) int {
	id, err := urcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only UserRefCodes entity in the query, returns an error if not exactly one entity was returned.
func (urcq *UserRefCodesQuery) Only(ctx context.Context) (*UserRefCodes, error) {
	urcs, err := urcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(urcs) {
	case 1:
		return urcs[0], nil
	case 0:
		return nil, &NotFoundError{userrefcodes.Label}
	default:
		return nil, &NotSingularError{userrefcodes.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (urcq *UserRefCodesQuery) OnlyX(ctx context.Context) *UserRefCodes {
	urc, err := urcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return urc
}

// OnlyID returns the only UserRefCodes id in the query, returns an error if not exactly one id was returned.
func (urcq *UserRefCodesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = urcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = &NotSingularError{userrefcodes.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (urcq *UserRefCodesQuery) OnlyIDX(ctx context.Context) int {
	id, err := urcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserRefCodesSlice.
func (urcq *UserRefCodesQuery) All(ctx context.Context) ([]*UserRefCodes, error) {
	if err := urcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return urcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (urcq *UserRefCodesQuery) AllX(ctx context.Context) []*UserRefCodes {
	urcs, err := urcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return urcs
}

// IDs executes the query and returns a list of UserRefCodes ids.
func (urcq *UserRefCodesQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := urcq.Select(userrefcodes.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (urcq *UserRefCodesQuery) IDsX(ctx context.Context) []int {
	ids, err := urcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (urcq *UserRefCodesQuery) Count(ctx context.Context) (int, error) {
	if err := urcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return urcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (urcq *UserRefCodesQuery) CountX(ctx context.Context) int {
	count, err := urcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (urcq *UserRefCodesQuery) Exist(ctx context.Context) (bool, error) {
	if err := urcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return urcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (urcq *UserRefCodesQuery) ExistX(ctx context.Context) bool {
	exist, err := urcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (urcq *UserRefCodesQuery) Clone() *UserRefCodesQuery {
	return &UserRefCodesQuery{
		config:     urcq.config,
		limit:      urcq.limit,
		offset:     urcq.offset,
		order:      append([]OrderFunc{}, urcq.order...),
		unique:     append([]string{}, urcq.unique...),
		predicates: append([]predicate.UserRefCodes{}, urcq.predicates...),
		// clone intermediate query.
		sql:  urcq.sql.Clone(),
		path: urcq.path,
	}
}

//  WithUsers tells the query-builder to eager-loads the nodes that are connected to
// the "users" edge. The optional arguments used to configure the query builder of the edge.
func (urcq *UserRefCodesQuery) WithUsers(opts ...func(*UserQuery)) *UserRefCodesQuery {
	query := &UserQuery{config: urcq.config}
	for _, opt := range opts {
		opt(query)
	}
	urcq.withUsers = query
	return urcq
}

//  WithRefcodeInvitee tells the query-builder to eager-loads the nodes that are connected to
// the "refcode_invitee" edge. The optional arguments used to configure the query builder of the edge.
func (urcq *UserRefCodesQuery) WithRefcodeInvitee(opts ...func(*UserQuery)) *UserRefCodesQuery {
	query := &UserQuery{config: urcq.config}
	for _, opt := range opts {
		opt(query)
	}
	urcq.withRefcodeInvitee = query
	return urcq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RefCode string `json:"ref_code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserRefCodes.Query().
//		GroupBy(userrefcodes.FieldRefCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (urcq *UserRefCodesQuery) GroupBy(field string, fields ...string) *UserRefCodesGroupBy {
	group := &UserRefCodesGroupBy{config: urcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := urcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return urcq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		RefCode string `json:"ref_code,omitempty"`
//	}
//
//	client.UserRefCodes.Query().
//		Select(userrefcodes.FieldRefCode).
//		Scan(ctx, &v)
//
func (urcq *UserRefCodesQuery) Select(field string, fields ...string) *UserRefCodesSelect {
	selector := &UserRefCodesSelect{config: urcq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := urcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return urcq.sqlQuery(), nil
	}
	return selector
}

func (urcq *UserRefCodesQuery) prepareQuery(ctx context.Context) error {
	if urcq.path != nil {
		prev, err := urcq.path(ctx)
		if err != nil {
			return err
		}
		urcq.sql = prev
	}
	return nil
}

func (urcq *UserRefCodesQuery) sqlAll(ctx context.Context) ([]*UserRefCodes, error) {
	var (
		nodes       = []*UserRefCodes{}
		withFKs     = urcq.withFKs
		_spec       = urcq.querySpec()
		loadedTypes = [2]bool{
			urcq.withUsers != nil,
			urcq.withRefcodeInvitee != nil,
		}
	)
	if urcq.withUsers != nil || urcq.withRefcodeInvitee != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userrefcodes.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &UserRefCodes{config: urcq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, urcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := urcq.withUsers; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserRefCodes)
		for i := range nodes {
			if fk := nodes[i].invitor_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "invitor_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Users = n
			}
		}
	}

	if query := urcq.withRefcodeInvitee; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UserRefCodes)
		for i := range nodes {
			if fk := nodes[i].invitee_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "invitee_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.RefcodeInvitee = n
			}
		}
	}

	return nodes, nil
}

func (urcq *UserRefCodesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := urcq.querySpec()
	return sqlgraph.CountNodes(ctx, urcq.driver, _spec)
}

func (urcq *UserRefCodesQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := urcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (urcq *UserRefCodesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userrefcodes.Table,
			Columns: userrefcodes.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userrefcodes.FieldID,
			},
		},
		From:   urcq.sql,
		Unique: true,
	}
	if ps := urcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := urcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := urcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := urcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (urcq *UserRefCodesQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(urcq.driver.Dialect())
	t1 := builder.Table(userrefcodes.Table)
	selector := builder.Select(t1.Columns(userrefcodes.Columns...)...).From(t1)
	if urcq.sql != nil {
		selector = urcq.sql
		selector.Select(selector.Columns(userrefcodes.Columns...)...)
	}
	for _, p := range urcq.predicates {
		p(selector)
	}
	for _, p := range urcq.order {
		p(selector)
	}
	if offset := urcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := urcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserRefCodesGroupBy is the builder for group-by UserRefCodes entities.
type UserRefCodesGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (urcgb *UserRefCodesGroupBy) Aggregate(fns ...AggregateFunc) *UserRefCodesGroupBy {
	urcgb.fns = append(urcgb.fns, fns...)
	return urcgb
}

// Scan applies the group-by query and scan the result into the given value.
func (urcgb *UserRefCodesGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := urcgb.path(ctx)
	if err != nil {
		return err
	}
	urcgb.sql = query
	return urcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := urcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(urcgb.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := urcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) StringsX(ctx context.Context) []string {
	v, err := urcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = urcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) StringX(ctx context.Context) string {
	v, err := urcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(urcgb.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := urcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) IntsX(ctx context.Context) []int {
	v, err := urcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = urcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) IntX(ctx context.Context) int {
	v, err := urcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(urcgb.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := urcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := urcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = urcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) Float64X(ctx context.Context) float64 {
	v, err := urcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(urcgb.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := urcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := urcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (urcgb *UserRefCodesGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = urcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (urcgb *UserRefCodesGroupBy) BoolX(ctx context.Context) bool {
	v, err := urcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (urcgb *UserRefCodesGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := urcgb.sqlQuery().Query()
	if err := urcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (urcgb *UserRefCodesGroupBy) sqlQuery() *sql.Selector {
	selector := urcgb.sql
	columns := make([]string, 0, len(urcgb.fields)+len(urcgb.fns))
	columns = append(columns, urcgb.fields...)
	for _, fn := range urcgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(urcgb.fields...)
}

// UserRefCodesSelect is the builder for select fields of UserRefCodes entities.
type UserRefCodesSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (urcs *UserRefCodesSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := urcs.path(ctx)
	if err != nil {
		return err
	}
	urcs.sql = query
	return urcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (urcs *UserRefCodesSelect) ScanX(ctx context.Context, v interface{}) {
	if err := urcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Strings(ctx context.Context) ([]string, error) {
	if len(urcs.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := urcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (urcs *UserRefCodesSelect) StringsX(ctx context.Context) []string {
	v, err := urcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = urcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (urcs *UserRefCodesSelect) StringX(ctx context.Context) string {
	v, err := urcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Ints(ctx context.Context) ([]int, error) {
	if len(urcs.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := urcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (urcs *UserRefCodesSelect) IntsX(ctx context.Context) []int {
	v, err := urcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = urcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (urcs *UserRefCodesSelect) IntX(ctx context.Context) int {
	v, err := urcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(urcs.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := urcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (urcs *UserRefCodesSelect) Float64sX(ctx context.Context) []float64 {
	v, err := urcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = urcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (urcs *UserRefCodesSelect) Float64X(ctx context.Context) float64 {
	v, err := urcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(urcs.fields) > 1 {
		return nil, errors.New("ent: UserRefCodesSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := urcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (urcs *UserRefCodesSelect) BoolsX(ctx context.Context) []bool {
	v, err := urcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (urcs *UserRefCodesSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = urcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userrefcodes.Label}
	default:
		err = fmt.Errorf("ent: UserRefCodesSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (urcs *UserRefCodesSelect) BoolX(ctx context.Context) bool {
	v, err := urcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (urcs *UserRefCodesSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := urcs.sqlQuery().Query()
	if err := urcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (urcs *UserRefCodesSelect) sqlQuery() sql.Querier {
	selector := urcs.sql
	selector.Select(selector.Columns(urcs.fields...)...)
	return selector
}
