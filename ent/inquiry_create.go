// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/inquiry"
	"github.com/huangc28/go-darkpanda-backend/ent/user"
)

// InquiryCreate is the builder for creating a Inquiry entity.
type InquiryCreate struct {
	config
	mutation *InquiryMutation
	hooks    []Hook
}

// SetBudget sets the budget field.
func (ic *InquiryCreate) SetBudget(f float32) *InquiryCreate {
	ic.mutation.SetBudget(f)
	return ic
}

// SetServiceType sets the service_type field.
func (ic *InquiryCreate) SetServiceType(it inquiry.ServiceType) *InquiryCreate {
	ic.mutation.SetServiceType(it)
	return ic
}

// SetInquiryStatus sets the inquiry_status field.
func (ic *InquiryCreate) SetInquiryStatus(is inquiry.InquiryStatus) *InquiryCreate {
	ic.mutation.SetInquiryStatus(is)
	return ic
}

// SetUsersID sets the users edge to User by id.
func (ic *InquiryCreate) SetUsersID(id int) *InquiryCreate {
	ic.mutation.SetUsersID(id)
	return ic
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (ic *InquiryCreate) SetNillableUsersID(id *int) *InquiryCreate {
	if id != nil {
		ic = ic.SetUsersID(*id)
	}
	return ic
}

// SetUsers sets the users edge to User.
func (ic *InquiryCreate) SetUsers(u *User) *InquiryCreate {
	return ic.SetUsersID(u.ID)
}

// Mutation returns the InquiryMutation object of the builder.
func (ic *InquiryCreate) Mutation() *InquiryMutation {
	return ic.mutation
}

// Save creates the Inquiry in the database.
func (ic *InquiryCreate) Save(ctx context.Context) (*Inquiry, error) {
	if err := ic.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Inquiry
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InquiryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InquiryCreate) SaveX(ctx context.Context) *Inquiry {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InquiryCreate) preSave() error {
	if _, ok := ic.mutation.Budget(); !ok {
		return &ValidationError{Name: "budget", err: errors.New("ent: missing required field \"budget\"")}
	}
	if _, ok := ic.mutation.ServiceType(); !ok {
		return &ValidationError{Name: "service_type", err: errors.New("ent: missing required field \"service_type\"")}
	}
	if v, ok := ic.mutation.ServiceType(); ok {
		if err := inquiry.ServiceTypeValidator(v); err != nil {
			return &ValidationError{Name: "service_type", err: fmt.Errorf("ent: validator failed for field \"service_type\": %w", err)}
		}
	}
	if _, ok := ic.mutation.InquiryStatus(); !ok {
		return &ValidationError{Name: "inquiry_status", err: errors.New("ent: missing required field \"inquiry_status\"")}
	}
	if v, ok := ic.mutation.InquiryStatus(); ok {
		if err := inquiry.InquiryStatusValidator(v); err != nil {
			return &ValidationError{Name: "inquiry_status", err: fmt.Errorf("ent: validator failed for field \"inquiry_status\": %w", err)}
		}
	}
	return nil
}

func (ic *InquiryCreate) sqlSave(ctx context.Context) (*Inquiry, error) {
	i, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}

func (ic *InquiryCreate) createSpec() (*Inquiry, *sqlgraph.CreateSpec) {
	var (
		i     = &Inquiry{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inquiry.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inquiry.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Budget(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: inquiry.FieldBudget,
		})
		i.Budget = value
	}
	if value, ok := ic.mutation.ServiceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: inquiry.FieldServiceType,
		})
		i.ServiceType = value
	}
	if value, ok := ic.mutation.InquiryStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: inquiry.FieldInquiryStatus,
		})
		i.InquiryStatus = value
	}
	if nodes := ic.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inquiry.UsersTable,
			Columns: []string{inquiry.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return i, _spec
}

// InquiryCreateBulk is the builder for creating a bulk of Inquiry entities.
type InquiryCreateBulk struct {
	config
	builders []*InquiryCreate
}

// Save creates the Inquiry entities in the database.
func (icb *InquiryCreateBulk) Save(ctx context.Context) ([]*Inquiry, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inquiry, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*InquiryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (icb *InquiryCreateBulk) SaveX(ctx context.Context) []*Inquiry {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
