// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/huangc28/go-darkpanda-backend/ent/groupusers"
	"github.com/huangc28/go-darkpanda-backend/ent/predicate"
)

// GroupUsersUpdate is the builder for updating GroupUsers entities.
type GroupUsersUpdate struct {
	config
	hooks      []Hook
	mutation   *GroupUsersMutation
	predicates []predicate.GroupUsers
}

// Where adds a new predicate for the builder.
func (guu *GroupUsersUpdate) Where(ps ...predicate.GroupUsers) *GroupUsersUpdate {
	guu.predicates = append(guu.predicates, ps...)
	return guu
}

// SetAuthType sets the auth_type field.
func (guu *GroupUsersUpdate) SetAuthType(gt groupusers.AuthType) *GroupUsersUpdate {
	guu.mutation.SetAuthType(gt)
	return guu
}

// Mutation returns the GroupUsersMutation object of the builder.
func (guu *GroupUsersUpdate) Mutation() *GroupUsersMutation {
	return guu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (guu *GroupUsersUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := guu.mutation.AuthType(); ok {
		if err := groupusers.AuthTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "auth_type", err: fmt.Errorf("ent: validator failed for field \"auth_type\": %w", err)}
		}
	}
	var (
		err      error
		affected int
	)
	if len(guu.hooks) == 0 {
		affected, err = guu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guu.mutation = mutation
			affected, err = guu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(guu.hooks) - 1; i >= 0; i-- {
			mut = guu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (guu *GroupUsersUpdate) SaveX(ctx context.Context) int {
	affected, err := guu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (guu *GroupUsersUpdate) Exec(ctx context.Context) error {
	_, err := guu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guu *GroupUsersUpdate) ExecX(ctx context.Context) {
	if err := guu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guu *GroupUsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupusers.Table,
			Columns: groupusers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupusers.FieldID,
			},
		},
	}
	if ps := guu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guu.mutation.AuthType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: groupusers.FieldAuthType,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, guu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupusers.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GroupUsersUpdateOne is the builder for updating a single GroupUsers entity.
type GroupUsersUpdateOne struct {
	config
	hooks    []Hook
	mutation *GroupUsersMutation
}

// SetAuthType sets the auth_type field.
func (guuo *GroupUsersUpdateOne) SetAuthType(gt groupusers.AuthType) *GroupUsersUpdateOne {
	guuo.mutation.SetAuthType(gt)
	return guuo
}

// Mutation returns the GroupUsersMutation object of the builder.
func (guuo *GroupUsersUpdateOne) Mutation() *GroupUsersMutation {
	return guuo.mutation
}

// Save executes the query and returns the updated entity.
func (guuo *GroupUsersUpdateOne) Save(ctx context.Context) (*GroupUsers, error) {
	if v, ok := guuo.mutation.AuthType(); ok {
		if err := groupusers.AuthTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "auth_type", err: fmt.Errorf("ent: validator failed for field \"auth_type\": %w", err)}
		}
	}
	var (
		err  error
		node *GroupUsers
	)
	if len(guuo.hooks) == 0 {
		node, err = guuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupUsersMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guuo.mutation = mutation
			node, err = guuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guuo.hooks) - 1; i >= 0; i-- {
			mut = guuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guuo *GroupUsersUpdateOne) SaveX(ctx context.Context) *GroupUsers {
	gu, err := guuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gu
}

// Exec executes the query on the entity.
func (guuo *GroupUsersUpdateOne) Exec(ctx context.Context) error {
	_, err := guuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guuo *GroupUsersUpdateOne) ExecX(ctx context.Context) {
	if err := guuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guuo *GroupUsersUpdateOne) sqlSave(ctx context.Context) (gu *GroupUsers, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupusers.Table,
			Columns: groupusers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupusers.FieldID,
			},
		},
	}
	id, ok := guuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GroupUsers.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := guuo.mutation.AuthType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: groupusers.FieldAuthType,
		})
	}
	gu = &GroupUsers{config: guuo.config}
	_spec.Assign = gu.assignValues
	_spec.ScanValues = gu.scanValues()
	if err = sqlgraph.UpdateNode(ctx, guuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupusers.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gu, nil
}
